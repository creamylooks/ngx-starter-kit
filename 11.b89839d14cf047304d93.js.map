{"version":3,"sources":["webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity-form.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.component.ts.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.service.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.model.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/index.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/shared-material-date.module.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/shared-material-date.module.ts.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/rxjs/_esm5/internal/operators/retry.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm5/datepicker.es5.js.pre-build-optimizer.js"],"names":["EntityFormComponent","data","dialogRef","this","title","entity","payload","prototype","ngOnInit","buildForm","submit","close","entityForm","value","entity_component_EntitiesComponent","EntitiesComponent","entityService","dataSource","table_es5","selection","collections_es5","showToolbar","showColumnFilter","showActionColumn","maxSelectable","actionColumn","selectColumn","loading$","_this","update","subscribe","filterPredicate","changed","pipe","Object","operators_filter","sc","added","length","_","selected","src","deselect","shift","ngOnDestroy","ngAfterViewInit","sort","paginator","getById","id","delete","item","concatMap","updateOrCreate","put","post","getData","getAll","map","result","isAllFilteredRowsSelected","filteredData","every","isSelected","isMasterToggleChecked","hasValue","isMasterToggleIndeterminate","masterToggle","clear","forEach","select","applyFilter","filterValue","trim","toLowerCase","filter","defineProperty","get","_displayedColumns","columns","column","visible","x","property","unshift","concat","enumerable","configurable","selectRow","toggle","showDetails","undefined","getRouteAnimation","outlet","activatedRouteData","toggleColumnVisibility","event","stopPropagation","stopImmediatePropagation","stringToDate","date","s","String","parseISO","entity_service_EntityService","EntityService","httpClient","baseUrl","environment","API_BASE_URL","loadingSubject","BehaviorSubject","asObservable","entityPath","catchError","handleError","findAll","sortOrder","pageNumber","pageSize","next","params","http","set","toString","retry","finalize","console","log","error","ErrorEvent","message","status","throwError","convertToJson","body","temporalFunctionToJson","Date","toJSON","format","jsonBody","JSON","stringify","Entity","init","assign","EntityColumnDef","header","displayFn","__webpack_require__","d","__webpack_exports__","SharedMaterialDateModule","Éµ0","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","tslib__WEBPACK_IMPORTED_MODULE_0__","_Subscriber__WEBPACK_IMPORTED_MODULE_1__","count","source","lift","RetryOperator","call","subscriber","RetrySubscriber","_super","destination","err","isStopped","_unsubscribeAndRecycle","MatDatepickerModule","MatCalendarHeader","MatCalendar","MatCalendarBody","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContent","MatDatepicker","MatDatepickerInput","MatDatepickerIntl","MatDatepickerToggle","MatMonthView","MatYearView","MatMultiYearView","_angular_core__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__","_angular_material_core__WEBPACK_IMPORTED_MODULE_8__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__","tslib__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__","_angular_forms__WEBPACK_IMPORTED_MODULE_14__","createMissingDateImplError","provider","Error","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","ngInjectableDef","factory","token","providedIn","MatCalendarCell","displayValue","ariaLabel","enabled","cssClasses","_elementRef","_ngZone","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","emit","ngOnChanges","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","rowIndex","colIndex","cellNumber","_focusActiveCell","runOutsideAngular","onStable","nativeElement","querySelector","focus","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","long","i","narrow","_weekdays","slice","_activeDate","today","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","isRtl","_isRtl","keyCode","addCalendarDays","getDate","getNumDaysInMonth","altKey","addCalendarYears","addCalendarMonths","dateFilter","preventDefault","compareDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","markForCheck","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","cellClasses","dateClass","d1","d2","obj","isDateInstance","isValid","yearSelected","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","min","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_intl","calendar","changeDetectorRef","stateChanges","currentView","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startView","_intlChanges","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","focusActiveCell","unsubscribe","complete","change","firstChange","view","_getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","datepickerUid","overlay","scrollStrategies","reposition","MatDatepickerContentBase","elementRef","_calendar","_dialog","_overlay","_viewContainerRef","scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","_validSelected","_focusedElementBeforeOpen","_inputSubscription","EMPTY","_disabledChange","_selectedChanged","_scrollStrategy","_datepickerInput","_color","_getThemePalette","_disabled","disabled","newValue","open","max","_dateFilter","_popupRef","dispose","_popupComponentRef","oldValue","_selectYear","_selectMonth","_registerInput","input","_valueChange","activeElement","touchUi","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","setTimeout","direction","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","create","overlayElement","setAttribute","backdropClick","detachments","keydownEvents","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","color","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_validator","compose","localeChanges","_datepicker","_value","oldDate","_formatValue","_min","_max","element","blur","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","readOnly","_onInput","_onChange","_onBlur","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","_watchStateChanges","_open","datepickerDisabled","inputDisabled","datepickerToggled"],"mappings":"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","file":"11.b89839d14cf047304d93.js","sourcesContent":["import { Inject, OnInit } from '@angular/core';\nimport { Entity } from './entity.model';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { FormGroup } from '@angular/forms';\n\nexport abstract class EntityFormComponent<TEntity extends Entity> implements OnInit {\n  title: string;\n  entity: TEntity;\n  entityForm: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) protected data: { title: string; payload: TEntity },\n    protected dialogRef: MatDialogRef<EntityFormComponent<TEntity>>,\n  ) {\n    this.title = data.title;\n    this.entity = data.payload;\n  }\n\n  abstract buildForm(entity: TEntity);\n\n  ngOnInit() {\n    this.buildForm(this.entity);\n  }\n\n  submit() {\n    this.dialogRef.close(this.entityForm.value as Partial<TEntity>);\n  }\n}\n","import { AfterViewInit, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\n\nimport { EntityService } from './entity.service';\nimport { Entity, EntityColumnDef } from './entity.model';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { EntityFormComponent } from './entity-form.component';\nimport { ComponentType } from '@angular/cdk/portal/typings/portal';\nimport { SelectionChange, SelectionModel } from '@angular/cdk/collections';\nimport { untilDestroy } from '@ngx-starter-kit/ngx-utils';\nimport { parseISO } from 'date-fns/esm';\n\nexport abstract class EntitiesComponent<TEntity extends Entity, TService extends EntityService<TEntity>>\n  implements OnInit, OnDestroy, AfterViewInit {\n  dataSource = new MatTableDataSource<TEntity>([]);\n  selection = new SelectionModel<TEntity>(false, []);\n\n  @ViewChild(MatPaginator)\n  paginator: MatPaginator;\n  @ViewChild(MatSort)\n  sort: MatSort;\n  @ViewChild('filter')\n  filterRef: ElementRef;\n\n  readonly loading$;\n  readonly columns: Array<EntityColumnDef<TEntity>>;\n  readonly title?: string = null;\n  readonly showToolbar?: boolean = false;\n  readonly showColumnFilter?: boolean = false;\n  readonly showActionColumn?: boolean = false;\n  readonly maxSelectable?: number = 1;\n  readonly actionColumn?: string = 'Actions';\n  readonly selectColumn?: string = 'select';\n  // TODO: make them optional abstract\n  readonly formRef?: ComponentType<EntityFormComponent<TEntity>>;\n  getNewEntity?(): TEntity;\n  filterPredicate?(entity: TEntity, filter: string): boolean;\n  // TODO: make them optional abstract end\n\n  constructor(protected entityService: TService) {\n    this.loading$ = entityService.loading$;\n  }\n\n  ngOnInit() {\n    this.selection = new SelectionModel<TEntity>(this.maxSelectable > 1, []);\n\n    this.update().subscribe();\n    if (this.filterPredicate) {\n      this.dataSource.filterPredicate = this.filterPredicate;\n    }\n\n    // remove first selected entity if more then max selected.\n    if (this.maxSelectable > 1) {\n      // is multi select mode?\n      this.selection.changed\n        .pipe(\n          // tap(console.log),\n          filter((sc: SelectionChange<TEntity>) => sc.added.length > 0),\n          filter(_ => this.selection.selected.length > this.maxSelectable),\n          untilDestroy(this),\n        )\n        .subscribe(_ => this.selection.deselect(this.selection.selected.shift()));\n    }\n\n    // fromEvent(this.filterRef.nativeElement, 'keyup')\n    //   .pipe(\n    //     debounceTime(150),\n    //     distinctUntilChanged()\n    //   ).subscribe(() => {\n    //   this.paginator.pageIndex = 0;\n    //   this.applyFilter(this.filterRef.nativeElement.value)\n    // });\n  }\n\n  ngOnDestroy() {}\n\n  ngAfterViewInit() {\n    // Needs to be set up after the view is initialized since the data source will look at the sort\n    // and paginator's initial values to know what data should be rendered.\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  getById(id: number) {\n    return this.entityService.getById(id);\n  }\n\n  delete(item: TEntity) {\n    return this.entityService.delete(item.id).pipe(concatMap(_ => this.update()));\n  }\n\n  updateOrCreate(entity: TEntity, id: number) {\n    if (id) {\n      return this.entityService.put(id, entity).pipe(concatMap(_ => this.update()));\n    } else {\n      return this.entityService.post(entity).pipe(concatMap(_ => this.update()));\n    }\n  }\n\n  /**\n   * Overwrite this method, to get the data your way.\n   */\n  getData(): Observable<TEntity[]> {\n    return this.entityService.getAll();\n  }\n\n  protected update() {\n    return this.getData().pipe(\n      map(result => {\n        this.dataSource = new MatTableDataSource<TEntity>(result);\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n        // return nothing as we don't need.\n        // return result\n      }),\n    );\n  }\n\n  /** Whether all filtered rows are selected. */\n  isAllFilteredRowsSelected() {\n    return this.dataSource.filteredData.every(data => this.selection.isSelected(data));\n  }\n\n  /** Whether the selection it totally matches the filtered rows. */\n  isMasterToggleChecked() {\n    return (\n      this.selection.hasValue() &&\n      this.isAllFilteredRowsSelected() &&\n      this.selection.selected.length >= this.dataSource.filteredData.length\n    );\n  }\n\n  /**\n   * Whether there is a selection that doesn't capture all the\n   * filtered rows there are no filtered rows displayed.\n   */\n  isMasterToggleIndeterminate() {\n    return this.selection.hasValue() && (!this.isAllFilteredRowsSelected() || !this.dataSource.filteredData.length);\n  }\n\n  /** Selects all filtered rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isMasterToggleChecked()) {\n      this.selection.clear();\n    } else {\n      this.dataSource.filteredData.forEach(data => this.selection.select(data));\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n\n  get displayedColumns(): string[] {\n    // prettier-ignore\n    let _displayedColumns = this.columns\n      .filter(column => column.visible)\n      .map(x => x.property);\n\n    if (this.maxSelectable > 0) {\n      _displayedColumns.unshift(this.selectColumn);\n    }\n    if (this.showActionColumn) {\n      _displayedColumns = _displayedColumns.concat(this.actionColumn);\n    }\n    return _displayedColumns;\n  }\n\n  selectRow(entity: TEntity) {\n    if (this.maxSelectable > 0) {\n      this.selection.toggle(entity);\n      if (this.selection.isSelected(entity)) {\n        this.showDetails(entity);\n      } else {\n        this.showDetails(undefined);\n      }\n    }\n  }\n\n  getRouteAnimation(outlet) {\n    return outlet.activatedRouteData['depth'] || 5;\n    // return outlet.isActivated ? outlet.activatedRoute : ''\n  }\n\n  /**\n   * will be called with entity or undefined\n   */\n  showDetails(entity: TEntity) {}\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  protected stringToDate(date: string | number | Date): number | Date {\n    const isString = s  => typeof(s) === 'string' || s instanceof String;\n    return isString(date) ? parseISO(date) : date;\n  }\n}\n","import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { untilDestroy } from '@ngx-starter-kit/ngx-utils';\nimport { parseISO } from 'date-fns/esm';\nvar EntitiesComponent = /** @class */ (function () {\n    // TODO: make them optional abstract end\n    function EntitiesComponent(entityService) {\n        this.entityService = entityService;\n        this.dataSource = new MatTableDataSource([]);\n        this.selection = new SelectionModel(false, []);\n        this.title = null;\n        this.showToolbar = false;\n        this.showColumnFilter = false;\n        this.showActionColumn = false;\n        this.maxSelectable = 1;\n        this.actionColumn = 'Actions';\n        this.selectColumn = 'select';\n        this.loading$ = entityService.loading$;\n    }\n    EntitiesComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.selection = new SelectionModel(this.maxSelectable > 1, []);\n        this.update().subscribe();\n        if (this.filterPredicate) {\n            this.dataSource.filterPredicate = this.filterPredicate;\n        }\n        // remove first selected entity if more then max selected.\n        if (this.maxSelectable > 1) {\n            // is multi select mode?\n            this.selection.changed\n                .pipe(\n            // tap(console.log),\n            filter(function (sc) { return sc.added.length > 0; }), filter(function (_) { return _this.selection.selected.length > _this.maxSelectable; }), untilDestroy(this))\n                .subscribe(function (_) { return _this.selection.deselect(_this.selection.selected.shift()); });\n        }\n        // fromEvent(this.filterRef.nativeElement, 'keyup')\n        //   .pipe(\n        //     debounceTime(150),\n        //     distinctUntilChanged()\n        //   ).subscribe(() => {\n        //   this.paginator.pageIndex = 0;\n        //   this.applyFilter(this.filterRef.nativeElement.value)\n        // });\n    };\n    EntitiesComponent.prototype.ngOnDestroy = function () { };\n    EntitiesComponent.prototype.ngAfterViewInit = function () {\n        // Needs to be set up after the view is initialized since the data source will look at the sort\n        // and paginator's initial values to know what data should be rendered.\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n    };\n    EntitiesComponent.prototype.getById = function (id) {\n        return this.entityService.getById(id);\n    };\n    EntitiesComponent.prototype.delete = function (item) {\n        var _this = this;\n        return this.entityService.delete(item.id).pipe(concatMap(function (_) { return _this.update(); }));\n    };\n    EntitiesComponent.prototype.updateOrCreate = function (entity, id) {\n        var _this = this;\n        if (id) {\n            return this.entityService.put(id, entity).pipe(concatMap(function (_) { return _this.update(); }));\n        }\n        else {\n            return this.entityService.post(entity).pipe(concatMap(function (_) { return _this.update(); }));\n        }\n    };\n    /**\n     * Overwrite this method, to get the data your way.\n     */\n    EntitiesComponent.prototype.getData = function () {\n        return this.entityService.getAll();\n    };\n    EntitiesComponent.prototype.update = function () {\n        var _this = this;\n        return this.getData().pipe(map(function (result) {\n            _this.dataSource = new MatTableDataSource(result);\n            _this.dataSource.sort = _this.sort;\n            _this.dataSource.paginator = _this.paginator;\n            // return nothing as we don't need.\n            // return result\n        }));\n    };\n    /** Whether all filtered rows are selected. */\n    EntitiesComponent.prototype.isAllFilteredRowsSelected = function () {\n        var _this = this;\n        return this.dataSource.filteredData.every(function (data) { return _this.selection.isSelected(data); });\n    };\n    /** Whether the selection it totally matches the filtered rows. */\n    EntitiesComponent.prototype.isMasterToggleChecked = function () {\n        return (this.selection.hasValue() &&\n            this.isAllFilteredRowsSelected() &&\n            this.selection.selected.length >= this.dataSource.filteredData.length);\n    };\n    /**\n     * Whether there is a selection that doesn't capture all the\n     * filtered rows there are no filtered rows displayed.\n     */\n    EntitiesComponent.prototype.isMasterToggleIndeterminate = function () {\n        return this.selection.hasValue() && (!this.isAllFilteredRowsSelected() || !this.dataSource.filteredData.length);\n    };\n    /** Selects all filtered rows if they are not all selected; otherwise clear selection. */\n    EntitiesComponent.prototype.masterToggle = function () {\n        var _this = this;\n        if (this.isMasterToggleChecked()) {\n            this.selection.clear();\n        }\n        else {\n            this.dataSource.filteredData.forEach(function (data) { return _this.selection.select(data); });\n        }\n    };\n    EntitiesComponent.prototype.applyFilter = function (filterValue) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n        this.dataSource.filter = filterValue;\n    };\n    Object.defineProperty(EntitiesComponent.prototype, \"displayedColumns\", {\n        get: function () {\n            // prettier-ignore\n            var _displayedColumns = this.columns\n                .filter(function (column) { return column.visible; })\n                .map(function (x) { return x.property; });\n            if (this.maxSelectable > 0) {\n                _displayedColumns.unshift(this.selectColumn);\n            }\n            if (this.showActionColumn) {\n                _displayedColumns = _displayedColumns.concat(this.actionColumn);\n            }\n            return _displayedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EntitiesComponent.prototype.selectRow = function (entity) {\n        if (this.maxSelectable > 0) {\n            this.selection.toggle(entity);\n            if (this.selection.isSelected(entity)) {\n                this.showDetails(entity);\n            }\n            else {\n                this.showDetails(undefined);\n            }\n        }\n    };\n    EntitiesComponent.prototype.getRouteAnimation = function (outlet) {\n        return outlet.activatedRouteData['depth'] || 5;\n        // return outlet.isActivated ? outlet.activatedRoute : ''\n    };\n    /**\n     * will be called with entity or undefined\n     */\n    EntitiesComponent.prototype.showDetails = function (entity) { };\n    EntitiesComponent.prototype.toggleColumnVisibility = function (column, event) {\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        column.visible = !column.visible;\n    };\n    EntitiesComponent.prototype.stringToDate = function (date) {\n        var isString = function (s) { return typeof (s) === 'string' || s instanceof String; };\n        return isString(date) ? parseISO(date) : date;\n    };\n    return EntitiesComponent;\n}());\nexport { EntitiesComponent };\n","import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Entity } from './entity.model';\nimport { catchError, finalize, retry } from 'rxjs/operators';\nimport { format } from 'date-fns/esm';\n\nexport interface Filter {\n  [name: string]: string | string[];\n}\n\nexport abstract class EntityService<T extends Entity> {\n  protected readonly baseUrl = environment.API_BASE_URL;\n  protected loadingSubject = new BehaviorSubject<boolean>(false);\n  public loading$ = this.loadingSubject.asObservable();\n\n  protected abstract entityPath: string;\n\n  constructor(protected httpClient: HttpClient) {}\n\n  getById(id: number | string) {\n    // this.loadingSubject.next(true);\n    return this.httpClient.get<T>(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      // finalize(() => this.loadingSubject.next(false))\n    );\n  }\n\n  findAll(filter: Filter, sortOrder = 'asc', pageNumber = 0, pageSize = 100): Observable<T[]> | Observable<never> {\n    this.loadingSubject.next(true);\n    return this.httpClient\n      .get<T[]>(`${this.baseUrl}/${this.entityPath}`, {\n        params: new HttpParams()\n          .set('filter', 'filter TODO')\n          .set('sortOrder', sortOrder)\n          .set('pageNumber', pageNumber.toString())\n          .set('pageSize', pageSize.toString()),\n      })\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError),\n        finalize(() => this.loadingSubject.next(false)),\n      );\n  }\n\n  getAll(): Observable<T[]> {\n    this.loadingSubject.next(true);\n    return this.httpClient.get<T[]>(`${this.baseUrl}/${this.entityPath}`).pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  delete(id: number | string) {\n    this.loadingSubject.next(true);\n    return this.httpClient.delete(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  post(entity: T) {\n    this.loadingSubject.next(true);\n    return this.httpClient.post(`${this.baseUrl}/${this.entityPath}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  put(id: number | string, entity: T) {\n    console.log(entity);\n    this.loadingSubject.next(true);\n    return this.httpClient.put(`${this.baseUrl}/${this.entityPath}/${id}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  protected handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    // return an ErrorObservable with a user-facing error message\n    return throwError('Something bad happened; please try again later.');\n  }\n\n  protected convertToJson(body: any) {\n    const temporalFunctionToJson = Date.prototype.toJSON;\n    Date.prototype.toJSON = function() {\n      return format(this, 'YYYY-MM-DD');\n    };\n\n    const jsonBody = JSON.stringify(body);\n\n    Date.prototype.toJSON = temporalFunctionToJson;\n    return jsonBody;\n  }\n}\n","import { TemplateRef } from '@angular/core';\n\nexport abstract class Entity {\n  abstract get id(): number | string;\n  [key: string]: any;\n  constructor(init?: Partial<Entity>) {\n    Object.assign(this, init);\n  }\n}\n\nexport class EntityColumnDef<T> {\n  readonly property: string;\n  readonly header = this.property;\n  public visible = true;\n  readonly sticky?: 'start' | 'end';\n  readonly template?: TemplateRef<any>;\n  readonly displayFn = (entity: T) => entity[this.property];\n\n  public constructor(init?: Partial<EntityColumnDef<T>>) {\n    Object.assign(this, init);\n  }\n}\n","export { SharedModule } from './lib/shared.module';\nexport { SharedFlexLayoutModule } from './lib/shared-flex-layout.module';\nexport { SharedPerfectScrollbarModule } from './lib/shared-perfect-scrollbar.module';\nexport { SharedMaterialDateModule } from './lib/shared-material-date.module';\n\nexport * from './lib/containers/entity/entity-form.component';\nexport * from './lib/containers/entity/entity.component';\nexport * from './lib/containers/entity/entity.service';\nexport * from './lib/containers/entity/entity.model';\n","import { NgModule } from '@angular/core';\n\nimport { MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatDateFormats, MatDatepickerModule, MatNativeDateModule } from '@angular/material';\n\nconst MODULE_EXPORTS = [MatDatepickerModule, MatNativeDateModule];\n\nconst DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: 'LL',\n  },\n  display: {\n    dateInput: 'LL',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@NgModule({\n  exports: MODULE_EXPORTS,\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: DATE_FORMATS }, { provide: MAT_DATE_LOCALE, useValue: 'en-GB' }],\n})\nexport class SharedMaterialDateModule {}\n","import { MatDateFormats, MatDatepickerModule, MatNativeDateModule } from '@angular/material';\nvar MODULE_EXPORTS = [MatDatepickerModule, MatNativeDateModule];\nvar DATE_FORMATS = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'LL',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\nvar Éµ0 = DATE_FORMATS;\nvar SharedMaterialDateModule = /** @class */ (function () {\n    function SharedMaterialDateModule() {\n    }\n    return SharedMaterialDateModule;\n}());\nexport { SharedMaterialDateModule };\nexport { Éµ0 };\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, ElementRef, NgZone, InjectionToken, ViewContainerRef, Directive, Attribute, ContentChild, defineInjectable } from '@angular/core';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, SPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n    return Error(\"MatDatepicker: No provider found for \" + provider + \". You must import one of the following \" +\n        \"modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a \" +\n        \"custom implementation.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Datepicker data that requires internationalization.\n */\nvar MatDatepickerIntl = /** @class */ (function () {\n    function MatDatepickerIntl() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the calendar popup (used by screen readers).\n         */\n        this.calendarLabel = 'Calendar';\n        /**\n         * A label for the button used to open the calendar popup (used by screen readers).\n         */\n        this.openCalendarLabel = 'Open calendar';\n        /**\n         * A label for the previous month button (used by screen readers).\n         */\n        this.prevMonthLabel = 'Previous month';\n        /**\n         * A label for the next month button (used by screen readers).\n         */\n        this.nextMonthLabel = 'Next month';\n        /**\n         * A label for the previous year button (used by screen readers).\n         */\n        this.prevYearLabel = 'Previous year';\n        /**\n         * A label for the next year button (used by screen readers).\n         */\n        this.nextYearLabel = 'Next year';\n        /**\n         * A label for the previous multi-year button (used by screen readers).\n         */\n        this.prevMultiYearLabel = 'Previous 20 years';\n        /**\n         * A label for the next multi-year button (used by screen readers).\n         */\n        this.nextMultiYearLabel = 'Next 20 years';\n        /**\n         * A label for the 'switch to month view' button (used by screen readers).\n         */\n        this.switchToMonthViewLabel = 'Choose date';\n        /**\n         * A label for the 'switch to year view' button (used by screen readers).\n         */\n        this.switchToMultiYearViewLabel = 'Choose month and year';\n    }\n    MatDatepickerIntl.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ MatDatepickerIntl.ngInjectableDef = defineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: \"root\" });\n    return MatDatepickerIntl;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nvar  /**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nMatCalendarCell = /** @class */ (function () {\n    function MatCalendarCell(value, displayValue, ariaLabel, enabled, cssClasses) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n    }\n    return MatCalendarCell;\n}());\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nvar MatCalendarBody = /** @class */ (function () {\n    function MatCalendarBody(_elementRef, _ngZone) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * The number of columns in the table.\n         */\n        this.numCols = 7;\n        /**\n         * The cell number of the active cell in the table.\n         */\n        this.activeCell = 0;\n        /**\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n         * maintained even as the table resizes.\n         */\n        this.cellAspectRatio = 1;\n        /**\n         * Emits when a new value is selected.\n         */\n        this.selectedValueChange = new EventEmitter();\n    }\n    /**\n     * @param {?} cell\n     * @return {?}\n     */\n    MatCalendarBody.prototype._cellClicked = /**\n     * @param {?} cell\n     * @return {?}\n     */\n    function (cell) {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatCalendarBody.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var columnChanges = changes['numCols'];\n        var _a = this, rows = _a.rows, numCols = _a.numCols;\n        if (changes['rows'] || columnChanges) {\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n            this._cellPadding = 50 * this.cellAspectRatio / numCols + \"%\";\n        }\n        if (columnChanges || !this._cellWidth) {\n            this._cellWidth = 100 / numCols + \"%\";\n        }\n    };\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    MatCalendarBody.prototype._isActiveCell = /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    function (rowIndex, colIndex) {\n        /** @type {?} */\n        var cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatCalendarBody.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                /** @type {?} */\n                var activeCell = _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    };\n    MatCalendarBody.decorators = [\n        { type: Component, args: [{selector: '[mat-calendar-body]',\n                    template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [ngClass]=\\\"item.cssClasses\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" [attr.aria-selected]=\\\"selectedValue === item.value\\\" (click)=\\\"_cellClicked(item)\\\" [style.width]=\\\"_cellWidth\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n                    styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n                    host: {\n                        'class': 'mat-calendar-body',\n                        'role': 'grid',\n                        'aria-readonly': 'true'\n                    },\n                    exportAs: 'matCalendarBody',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatCalendarBody.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone }\n    ]; };\n    MatCalendarBody.propDecorators = {\n        label: [{ type: Input }],\n        rows: [{ type: Input }],\n        todayValue: [{ type: Input }],\n        selectedValue: [{ type: Input }],\n        labelMinRequiredCells: [{ type: Input }],\n        numCols: [{ type: Input }],\n        activeCell: [{ type: Input }],\n        cellAspectRatio: [{ type: Input }],\n        selectedValueChange: [{ type: Output }]\n    };\n    return MatCalendarBody;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatMonthView = /** @class */ (function () {\n    function MatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new date is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        /** @type {?} */\n        var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        /** @type {?} */\n        var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        /** @type {?} */\n        var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        /** @type {?} */\n        var weekdays = longWeekdays.map(function (long, i) {\n            return { long: long, narrow: narrowWeekdays[i] };\n        });\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatMonthView.prototype, \"activeDate\", {\n        /**\n         * The date to display in this month view (everything other than the month and year is ignored).\n         */\n        get: /**\n         * The date to display in this month view (everything other than the month and year is ignored).\n         * @return {?}\n         */\n        function () { return this._activeDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var oldActiveDate = this._activeDate;\n            /** @type {?} */\n            var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMonthView.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._selectedDate = this._getDateInCurrentMonth(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMonthView.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMonthView.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatMonthView.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._init();\n    };\n    /** Handles when a new date is selected. */\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._dateSelected = /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        if (this._selectedDate != date) {\n            /** @type {?} */\n            var selectedYear = this._dateAdapter.getYear(this.activeDate);\n            /** @type {?} */\n            var selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n            /** @type {?} */\n            var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit();\n    };\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatMonthView.prototype._handleCalendarBodyKeydown = /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        var oldActiveDate = this._activeDate;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n                    this._userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /** Initializes this month view. */\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    MatMonthView.prototype._init = /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    function () {\n        this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n        this._monthLabel =\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                .toLocaleUpperCase();\n        /** @type {?} */\n        var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatMonthView.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        this._matCalendarBody._focusActiveCell();\n    };\n    /** Creates MatCalendarCells for the dates in this month. */\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n    MatMonthView.prototype._createWeekCells = /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        /** @type {?} */\n        var dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            /** @type {?} */\n            var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            /** @type {?} */\n            var enabled = this._shouldEnableDate(date);\n            /** @type {?} */\n            var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            /** @type {?} */\n            var cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n            this._weeks[this._weeks.length - 1]\n                .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    };\n    /** Date filter for the month */\n    /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._shouldEnableDate = /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n    };\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._getDateInCurrentMonth = /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n            this._dateAdapter.getDate(date) : null;\n    };\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    MatMonthView.prototype._hasSameMonthAndYear = /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    function (d1, d2) {\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatMonthView.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Determines whether the user has the RTL layout direction. */\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    MatMonthView.prototype._isRtl = /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._dir && this._dir.value === 'rtl';\n    };\n    MatMonthView.decorators = [\n        { type: Component, args: [{selector: 'mat-month-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                    exportAs: 'matMonthView',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    MatMonthView.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatMonthView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        _userSelection: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody,] }]\n    };\n    return MatMonthView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar yearsPerPage = 24;\n/** @type {?} */\nvar yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatMultiYearView = /** @class */ (function () {\n    function MatMultiYearView(_changeDetectorRef, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new year is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected year. This doesn't imply a change on the selected date\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatMultiYearView.prototype, \"activeDate\", {\n        /** The date to display in this multi-year view (everything other than the year is ignored). */\n        get: /**\n         * The date to display in this multi-year view (everything other than the year is ignored).\n         * @return {?}\n         */\n        function () { return this._activeDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var oldActiveDate = this._activeDate;\n            /** @type {?} */\n            var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n                Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMultiYearView.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMultiYearView.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMultiYearView.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatMultiYearView.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._init();\n    };\n    /** Initializes this multi-year view. */\n    /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n    MatMultiYearView.prototype._init = /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n        /** @type {?} */\n        var activeYear = this._dateAdapter.getYear(this._activeDate);\n        /** @type {?} */\n        var activeOffset = activeYear % yearsPerPage;\n        this._years = [];\n        for (var i = 0, row = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length == yearsPerRow) {\n                this._years.push(row.map(function (year) { return _this._createCellForYear(year); }));\n                row = [];\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Handles when a new year is selected. */\n    /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n    MatMultiYearView.prototype._yearSelected = /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) {\n        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n        /** @type {?} */\n        var month = this._dateAdapter.getMonth(this.activeDate);\n        /** @type {?} */\n        var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    };\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatMultiYearView.prototype._handleCalendarBodyKeydown = /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        var oldActiveDate = this._activeDate;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /**\n     * @return {?}\n     */\n    MatMultiYearView.prototype._getActiveCell = /**\n     * @return {?}\n     */\n    function () {\n        return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatMultiYearView.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        this._matCalendarBody._focusActiveCell();\n    };\n    /** Creates an MatCalendarCell for the given year. */\n    /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    MatMultiYearView.prototype._createCellForYear = /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) {\n        /** @type {?} */\n        var yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n        return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n    };\n    /** Whether the given year is enabled. */\n    /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    MatMultiYearView.prototype._shouldEnableYear = /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        var firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n        // If any date in the year is enabled count the year as enabled.\n        for (var date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatMultiYearView.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Determines whether the user has the RTL layout direction. */\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    MatMultiYearView.prototype._isRtl = /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._dir && this._dir.value === 'rtl';\n    };\n    MatMultiYearView.decorators = [\n        { type: Component, args: [{selector: 'mat-multi-year-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [rows]=\\\"_years\\\" [todayValue]=\\\"_todayYear\\\" [selectedValue]=\\\"_selectedYear\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_getActiveCell()\\\" (selectedValueChange)=\\\"_yearSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                    exportAs: 'matMultiYearView',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    MatMultiYearView.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatMultiYearView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        yearSelected: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody,] }]\n    };\n    return MatMultiYearView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatYearView = /** @class */ (function () {\n    function MatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new month is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected month. This doesn't imply a change on the selected date\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatYearView.prototype, \"activeDate\", {\n        /** The date to display in this year view (everything other than the year is ignored). */\n        get: /**\n         * The date to display in this year view (everything other than the year is ignored).\n         * @return {?}\n         */\n        function () { return this._activeDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var oldActiveDate = this._activeDate;\n            /** @type {?} */\n            var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatYearView.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatYearView.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatYearView.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatYearView.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._init();\n    };\n    /** Handles when a new month is selected. */\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._monthSelected = /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    function (month) {\n        /** @type {?} */\n        var normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        this.monthSelected.emit(normalizedDate);\n        /** @type {?} */\n        var daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    };\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatYearView.prototype._handleCalendarBodyKeydown = /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        var oldActiveDate = this._activeDate;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /** Initializes this year view. */\n    /**\n     * Initializes this year view.\n     * @return {?}\n     */\n    MatYearView.prototype._init = /**\n     * Initializes this year view.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        /** @type {?} */\n        var monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(function (row) { return row.map(function (month) { return _this._createCellForMonth(month, monthNames[month]); }); });\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatYearView.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        this._matCalendarBody._focusActiveCell();\n    };\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    MatYearView.prototype._getMonthInCurrentYear = /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n            this._dateAdapter.getMonth(date) : null;\n    };\n    /** Creates an MatCalendarCell for the given month. */\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    MatYearView.prototype._createCellForMonth = /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    function (month, monthName) {\n        /** @type {?} */\n        var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n    };\n    /** Whether the given month is enabled. */\n    /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._shouldEnableMonth = /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n    function (month) {\n        /** @type {?} */\n        var activeYear = this._dateAdapter.getYear(this.activeDate);\n        if (month === undefined || month === null ||\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (var date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._isYearAndMonthAfterMaxDate = /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    function (year, month) {\n        if (this.maxDate) {\n            /** @type {?} */\n            var maxYear = this._dateAdapter.getYear(this.maxDate);\n            /** @type {?} */\n            var maxMonth = this._dateAdapter.getMonth(this.maxDate);\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n        return false;\n    };\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._isYearAndMonthBeforeMinDate = /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    function (year, month) {\n        if (this.minDate) {\n            /** @type {?} */\n            var minYear = this._dateAdapter.getYear(this.minDate);\n            /** @type {?} */\n            var minMonth = this._dateAdapter.getMonth(this.minDate);\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n        return false;\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatYearView.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Determines whether the user has the RTL layout direction. */\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    MatYearView.prototype._isRtl = /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._dir && this._dir.value === 'rtl';\n    };\n    MatYearView.decorators = [\n        { type: Component, args: [{selector: 'mat-year-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                    exportAs: 'matYearView',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    MatYearView.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatYearView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody,] }]\n    };\n    return MatYearView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default header for MatCalendar\n * @template D\n */\nvar MatCalendarHeader = /** @class */ (function () {\n    function MatCalendarHeader(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n        this._intl = _intl;\n        this.calendar = calendar;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this.calendar.stateChanges.subscribe(function () { return changeDetectorRef.markForCheck(); });\n    }\n    Object.defineProperty(MatCalendarHeader.prototype, \"periodButtonText\", {\n        /** The label for the current calendar view. */\n        get: /**\n         * The label for the current calendar view.\n         * @return {?}\n         */\n        function () {\n            if (this.calendar.currentView == 'month') {\n                return this._dateAdapter\n                    .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                    .toLocaleUpperCase();\n            }\n            if (this.calendar.currentView == 'year') {\n                return this._dateAdapter.getYearName(this.calendar.activeDate);\n            }\n            /** @type {?} */\n            var activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n            /** @type {?} */\n            var firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n            /** @type {?} */\n            var lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n            return firstYearInView + \" \\u2013 \" + lastYearInView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendarHeader.prototype, \"periodButtonLabel\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.calendar.currentView == 'month' ?\n                this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendarHeader.prototype, \"prevButtonLabel\", {\n        /** The label for the previous button. */\n        get: /**\n         * The label for the previous button.\n         * @return {?}\n         */\n        function () {\n            return {\n                'month': this._intl.prevMonthLabel,\n                'year': this._intl.prevYearLabel,\n                'multi-year': this._intl.prevMultiYearLabel\n            }[this.calendar.currentView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendarHeader.prototype, \"nextButtonLabel\", {\n        /** The label for the next button. */\n        get: /**\n         * The label for the next button.\n         * @return {?}\n         */\n        function () {\n            return {\n                'month': this._intl.nextMonthLabel,\n                'year': this._intl.nextYearLabel,\n                'multi-year': this._intl.nextMultiYearLabel\n            }[this.calendar.currentView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Handles user clicks on the period label. */\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.currentPeriodClicked = /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    function () {\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    };\n    /** Handles user clicks on the previous button. */\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.previousClicked = /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    function () {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    };\n    /** Handles user clicks on the next button. */\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.nextClicked = /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    function () {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    };\n    /** Whether the previous period button is enabled. */\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.previousEnabled = /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    function () {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n        return !this.calendar.minDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    };\n    /** Whether the next period button is enabled. */\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.nextEnabled = /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    function () {\n        return !this.calendar.maxDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    };\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    MatCalendarHeader.prototype._isSameView = /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    function (date1, date2) {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n        }\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n            Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n    };\n    MatCalendarHeader.decorators = [\n        { type: Component, args: [{selector: 'mat-calendar-header',\n                    template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\" (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\" cdkAriaLive=\\\"polite\\\">{{periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><ng-content></ng-content><button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\" [attr.aria-label]=\\\"prevButtonLabel\\\"></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\" [attr.aria-label]=\\\"nextButtonLabel\\\"></button></div></div>\",\n                    exportAs: 'matCalendarHeader',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatCalendarHeader.ctorParameters = function () { return [\n        { type: MatDatepickerIntl },\n        { type: MatCalendar, decorators: [{ type: Inject, args: [forwardRef(function () { return MatCalendar; }),] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: ChangeDetectorRef }\n    ]; };\n    return MatCalendarHeader;\n}());\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatCalendar = /** @class */ (function () {\n    function MatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n        var _this = this;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Used for scheduling that focus should be moved to the active cell on the next tick.\n         * We need to schedule it, rather than do it immediately, because we have to wait\n         * for Angular to re-evaluate the view children.\n         */\n        this._moveFocusOnNextTick = false;\n        /**\n         * Whether the calendar should be started in month or year view.\n         */\n        this.startView = 'month';\n        /**\n         * Emits when the currently selected date changes.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the year chosen in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits the month chosen in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits whenever there is a state change that the header may need to respond to.\n         */\n        this.stateChanges = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._intlChanges = _intl.changes.subscribe(function () {\n            _changeDetectorRef.markForCheck();\n            _this.stateChanges.next();\n        });\n    }\n    Object.defineProperty(MatCalendar.prototype, \"startAt\", {\n        /** A date representing the period (month or year) to start the calendar in. */\n        get: /**\n         * A date representing the period (month or year) to start the calendar in.\n         * @return {?}\n         */\n        function () { return this._startAt; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"activeDate\", {\n        /**\n         * The current active date. This determines which time period is shown and which date is\n         * highlighted when using keyboard navigation.\n         */\n        get: /**\n         * The current active date. This determines which time period is shown and which date is\n         * highlighted when using keyboard navigation.\n         * @return {?}\n         */\n        function () { return this._clampedActiveDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"currentView\", {\n        /** Whether the calendar is in month view. */\n        get: /**\n         * Whether the calendar is in month view.\n         * @return {?}\n         */\n        function () { return this._currentView; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._currentView = value;\n            this._moveFocusOnNextTick = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n        this.activeDate = this.startAt || this._dateAdapter.today();\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngAfterViewChecked = /**\n     * @return {?}\n     */\n    function () {\n        if (this._moveFocusOnNextTick) {\n            this._moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatCalendar.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n        if (change && !change.firstChange) {\n            /** @type {?} */\n            var view = this._getCurrentViewComponent();\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                this._changeDetectorRef.detectChanges();\n                view._init();\n            }\n        }\n        this.stateChanges.next();\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.focusActiveCell = /**\n     * @return {?}\n     */\n    function () {\n        this._getCurrentViewComponent()._focusActiveCell();\n    };\n    /** Updates today's date after an update of the active date */\n    /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n    MatCalendar.prototype.updateTodaysDate = /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n        view.ngAfterContentInit();\n    };\n    /** Handles date selection in the month view. */\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    MatCalendar.prototype._dateSelected = /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        if (!this._dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    };\n    /** Handles year selection in the multiyear view. */\n    /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    MatCalendar.prototype._yearSelectedInMultiYearView = /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    function (normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    };\n    /** Handles month selection in the year view. */\n    /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    MatCalendar.prototype._monthSelectedInYearView = /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    function (normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype._userSelected = /**\n     * @return {?}\n     */\n    function () {\n        this._userSelection.emit();\n    };\n    /** Handles year/month selection in the multi-year/year views. */\n    /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n    MatCalendar.prototype._goToDateInView = /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n    function (date, view) {\n        this.activeDate = date;\n        this.currentView = view;\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatCalendar.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Returns the component instance that corresponds to the current calendar view. */\n    /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n    MatCalendar.prototype._getCurrentViewComponent = /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this.monthView || this.yearView || this.multiYearView;\n    };\n    MatCalendar.decorators = [\n        { type: Component, args: [{selector: 'mat-calendar',\n                    template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template><div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\"><mat-month-view *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" [dateClass]=\\\"dateClass\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchCase=\\\"'year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\\\"'multi-year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view></div>\",\n                    styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n                    host: {\n                        'class': 'mat-calendar',\n                    },\n                    exportAs: 'matCalendar',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatCalendar.ctorParameters = function () { return [\n        { type: MatDatepickerIntl },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: ChangeDetectorRef }\n    ]; };\n    MatCalendar.propDecorators = {\n        headerComponent: [{ type: Input }],\n        startAt: [{ type: Input }],\n        startView: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        yearSelected: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        _userSelection: [{ type: Output }],\n        monthView: [{ type: ViewChild, args: [MatMonthView,] }],\n        yearView: [{ type: ViewChild, args: [MatYearView,] }],\n        multiYearView: [{ type: ViewChild, args: [MatMultiYearView,] }]\n    };\n    return MatCalendar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\nvar matDatepickerAnimations = {\n    /**\n     * Transforms the height of the datepicker's calendar.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * Fades in the content of the calendar.\n     */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n        // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\nvar datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\nvar MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nMatDatepickerContentBase = /** @class */ (function () {\n    function MatDatepickerContentBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatDatepickerContentBase;\n}());\n/** @type {?} */\nvar _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\nvar MatDatepickerContent = /** @class */ (function (_super) {\n    __extends(MatDatepickerContent, _super);\n    function MatDatepickerContent(elementRef) {\n        return _super.call(this, elementRef) || this;\n    }\n    /**\n     * @return {?}\n     */\n    MatDatepickerContent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        this._calendar.focusActiveCell();\n    };\n    MatDatepickerContent.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker-content',\n                    template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\" [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\" (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\" (monthSelected)=\\\"datepicker._selectMonth($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n                    styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n                    host: {\n                        'class': 'mat-datepicker-content',\n                        '[@transformPanel]': '\"enter\"',\n                        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                    },\n                    animations: [\n                        matDatepickerAnimations.transformPanel,\n                        matDatepickerAnimations.fadeInCalendar,\n                    ],\n                    exportAs: 'matDatepickerContent',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    inputs: ['color'],\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepickerContent.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    MatDatepickerContent.propDecorators = {\n        _calendar: [{ type: ViewChild, args: [MatCalendar,] }]\n    };\n    return MatDatepickerContent;\n}(_MatDatepickerContentMixinBase));\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\nvar MatDatepicker = /** @class */ (function () {\n    function MatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._document = _document;\n        /**\n         * The view that the calendar should start in.\n         */\n        this.startView = 'month';\n        this._touchUi = false;\n        /**\n         * Emits selected year in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits selected month in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when the datepicker has been opened.\n         */\n        this.openedStream = new EventEmitter();\n        /**\n         * Emits when the datepicker has been closed.\n         */\n        this.closedStream = new EventEmitter();\n        this._opened = false;\n        /**\n         * The id for the datepicker calendar.\n         */\n        this.id = \"mat-datepicker-\" + datepickerUid++;\n        this._validSelected = null;\n        /**\n         * The element that was focused before the datepicker was opened.\n         */\n        this._focusedElementBeforeOpen = null;\n        /**\n         * Subscription to value changes in the associated input element.\n         */\n        this._inputSubscription = Subscription.EMPTY;\n        /**\n         * Emits when the datepicker is disabled.\n         */\n        this._disabledChange = new Subject();\n        /**\n         * Emits new selected date when selected date changes.\n         */\n        this._selectedChanged = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    Object.defineProperty(MatDatepicker.prototype, \"startAt\", {\n        /** The date to open the calendar to initially. */\n        get: /**\n         * The date to open the calendar to initially.\n         * @return {?}\n         */\n        function () {\n            // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n            // selected value is.\n            return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"color\", {\n        /** Color palette to use on the datepicker's calendar. */\n        get: /**\n         * Color palette to use on the datepicker's calendar.\n         * @return {?}\n         */\n        function () {\n            return this._color ||\n                (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._color = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"touchUi\", {\n        /**\n         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n         * than a popup and elements have more padding to allow for bigger touch targets.\n         */\n        get: /**\n         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n         * than a popup and elements have more padding to allow for bigger touch targets.\n         * @return {?}\n         */\n        function () { return this._touchUi; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._touchUi = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"disabled\", {\n        /** Whether the datepicker pop-up should be disabled. */\n        get: /**\n         * Whether the datepicker pop-up should be disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled === undefined && this._datepickerInput ?\n                this._datepickerInput.disabled : !!this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._disabledChange.next(newValue);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"opened\", {\n        /** Whether the calendar is open. */\n        get: /**\n         * Whether the calendar is open.\n         * @return {?}\n         */\n        function () { return this._opened; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { value ? this.open() : this.close(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._validSelected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._validSelected = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () {\n            return this._datepickerInput && this._datepickerInput.min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () {\n            return this._datepickerInput && this._datepickerInput.max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_dateFilter\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._datepickerInput && this._datepickerInput._dateFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDatepicker.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.close();\n        this._inputSubscription.unsubscribe();\n        this._disabledChange.complete();\n        if (this._popupRef) {\n            this._popupRef.dispose();\n            this._popupComponentRef = null;\n        }\n    };\n    /** Selects the given date */\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    MatDatepicker.prototype.select = /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var oldValue = this._selected;\n        this._selected = date;\n        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n            this._selectedChanged.next(date);\n        }\n    };\n    /** Emits the selected year in multiyear view */\n    /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    MatDatepicker.prototype._selectYear = /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    function (normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    };\n    /** Emits selected month in year view */\n    /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    MatDatepicker.prototype._selectMonth = /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    function (normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    };\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    MatDatepicker.prototype._registerInput = /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    function (input) {\n        var _this = this;\n        if (this._datepickerInput) {\n            throw Error('A MatDatepicker can only be associated with a single input.');\n        }\n        this._datepickerInput = input;\n        this._inputSubscription =\n            this._datepickerInput._valueChange.subscribe(function (value) { return _this._selected = value; });\n    };\n    /** Open the calendar. */\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n    MatDatepicker.prototype.open = /**\n     * Open the calendar.\n     * @return {?}\n     */\n    function () {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this._datepickerInput) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        if (this._document) {\n            this._focusedElementBeforeOpen = this._document.activeElement;\n        }\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\n        this._opened = true;\n        this.openedStream.emit();\n    };\n    /** Close the calendar. */\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n    MatDatepicker.prototype.close = /**\n     * Close the calendar.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._opened) {\n            return;\n        }\n        if (this._popupRef && this._popupRef.hasAttached()) {\n            this._popupRef.detach();\n        }\n        if (this._dialogRef) {\n            this._dialogRef.close();\n            this._dialogRef = null;\n        }\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\n            this._calendarPortal.detach();\n        }\n        /** @type {?} */\n        var completeClose = function () {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (_this._opened) {\n                _this._opened = false;\n                _this.closedStream.emit();\n                _this._focusedElementBeforeOpen = null;\n            }\n        };\n        if (this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this._focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    };\n    /** Open the calendar as a dialog. */\n    /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._openAsDialog = /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Usually this would be handled by `open` which ensures that we can only have one overlay\n        // open at a time, however since we reset the variables in async handlers some overlays\n        // may slip through if the user opens and closes multiple times in quick succession (e.g.\n        // by holding down the enter key).\n        if (this._dialogRef) {\n            this._dialogRef.close();\n        }\n        this._dialogRef = this._dialog.open(MatDatepickerContent, {\n            direction: this._dir ? this._dir.value : 'ltr',\n            viewContainerRef: this._viewContainerRef,\n            panelClass: 'mat-datepicker-dialog',\n        });\n        this._dialogRef.afterClosed().subscribe(function () { return _this.close(); });\n        this._dialogRef.componentInstance.datepicker = this;\n        this._setColor();\n    };\n    /** Open the calendar as a popup. */\n    /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._openAsPopup = /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._calendarPortal) {\n            this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        }\n        if (!this._popupRef) {\n            this._createPopup();\n        }\n        if (!this._popupRef.hasAttached()) {\n            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n            this._popupComponentRef.instance.datepicker = this;\n            this._setColor();\n            // Update the position once the calendar has rendered.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                _this._popupRef.updatePosition();\n            });\n        }\n    };\n    /** Create the popup. */\n    /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._createPopup = /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig({\n            positionStrategy: this._createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mat-overlay-transparent-backdrop',\n            direction: this._dir,\n            scrollStrategy: this._scrollStrategy(),\n            panelClass: 'mat-datepicker-popup',\n        });\n        this._popupRef = this._overlay.create(overlayConfig);\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(function (event) {\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\n            return event.keyCode === ESCAPE ||\n                (_this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n        }))).subscribe(function () { return _this.close(); });\n    };\n    /** Create the popup PositionStrategy. */\n    /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._createPopupPositionStrategy = /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._overlay.position()\n            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n            .withTransformOriginOn('.mat-datepicker-content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatDatepicker.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Passes the current theme color along to the calendar overlay. */\n    /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._setColor = /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var color = this.color;\n        if (this._popupComponentRef) {\n            this._popupComponentRef.instance.color = color;\n        }\n        if (this._dialogRef) {\n            this._dialogRef.componentInstance.color = color;\n        }\n    };\n    MatDatepicker.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker',\n                    template: '',\n                    exportAs: 'matDatepicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepicker.ctorParameters = function () { return [\n        { type: MatDialog },\n        { type: Overlay },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    MatDatepicker.propDecorators = {\n        calendarHeaderComponent: [{ type: Input }],\n        startAt: [{ type: Input }],\n        startView: [{ type: Input }],\n        color: [{ type: Input }],\n        touchUi: [{ type: Input }],\n        disabled: [{ type: Input }],\n        yearSelected: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        panelClass: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        openedStream: [{ type: Output, args: ['opened',] }],\n        closedStream: [{ type: Output, args: ['closed',] }],\n        opened: [{ type: Input }]\n    };\n    return MatDatepicker;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatDatepickerInput; }),\n    multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MatDatepickerInput; }),\n    multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nvar  /**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nMatDatepickerInputEvent = /** @class */ (function () {\n    function MatDatepickerInputEvent(target, targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n    return MatDatepickerInputEvent;\n}());\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\nvar MatDatepickerInput = /** @class */ (function () {\n    function MatDatepickerInput(_elementRef, _dateAdapter, _dateFormats, _formField) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._formField = _formField;\n        /**\n         * Emits when a `change` event is fired on this `<input>`.\n         */\n        this.dateChange = new EventEmitter();\n        /**\n         * Emits when an `input` event is fired on this `<input>`.\n         */\n        this.dateInput = new EventEmitter();\n        /**\n         * Emits when the value changes (either due to user input or programmatic change).\n         */\n        this._valueChange = new EventEmitter();\n        /**\n         * Emits when the disabled state has changed\n         */\n        this._disabledChange = new EventEmitter();\n        this._onTouched = function () { };\n        this._cvaOnChange = function () { };\n        this._validatorOnChange = function () { };\n        this._datepickerSubscription = Subscription.EMPTY;\n        this._localeSubscription = Subscription.EMPTY;\n        /**\n         * The form control validator for whether the input parses.\n         */\n        this._parseValidator = function () {\n            return _this._lastValueValid ?\n                null : { 'matDatepickerParse': { 'text': _this._elementRef.nativeElement.value } };\n        };\n        /**\n         * The form control validator for the min date.\n         */\n        this._minValidator = function (control) {\n            /** @type {?} */\n            var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));\n            return (!_this.min || !controlValue ||\n                _this._dateAdapter.compareDate(_this.min, controlValue) <= 0) ?\n                null : { 'matDatepickerMin': { 'min': _this.min, 'actual': controlValue } };\n        };\n        /**\n         * The form control validator for the max date.\n         */\n        this._maxValidator = function (control) {\n            /** @type {?} */\n            var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));\n            return (!_this.max || !controlValue ||\n                _this._dateAdapter.compareDate(_this.max, controlValue) >= 0) ?\n                null : { 'matDatepickerMax': { 'max': _this.max, 'actual': controlValue } };\n        };\n        /**\n         * The form control validator for the date filter.\n         */\n        this._filterValidator = function (control) {\n            /** @type {?} */\n            var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));\n            return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue) ?\n                null : { 'matDatepickerFilter': true };\n        };\n        /**\n         * The combined form control validator for this input.\n         */\n        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n        /**\n         * Whether the last value set on the input was valid.\n         */\n        this._lastValueValid = false;\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(function () {\n            _this.value = _this.value;\n        });\n    }\n    Object.defineProperty(MatDatepickerInput.prototype, \"matDatepicker\", {\n        /** The datepicker that this input is associated with. */\n        set: /**\n         * The datepicker that this input is associated with.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (!value) {\n                return;\n            }\n            this._datepicker = value;\n            this._datepicker._registerInput(this);\n            this._datepickerSubscription.unsubscribe();\n            this._datepickerSubscription = this._datepicker._selectedChanged.subscribe(function (selected) {\n                _this.value = selected;\n                _this._cvaOnChange(selected);\n                _this._onTouched();\n                _this.dateInput.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));\n                _this.dateChange.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"matDatepickerFilter\", {\n        /** Function that can be used to filter out dates within the datepicker. */\n        set: /**\n         * Function that can be used to filter out dates within the datepicker.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._dateFilter = value;\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"value\", {\n        /** The value of the input. */\n        get: /**\n         * The value of the input.\n         * @return {?}\n         */\n        function () { return this._value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            value = this._dateAdapter.deserialize(value);\n            this._lastValueValid = !value || this._dateAdapter.isValid(value);\n            value = this._getValidDateOrNull(value);\n            /** @type {?} */\n            var oldDate = this.value;\n            this._value = value;\n            this._formatValue(value);\n            if (!this._dateAdapter.sameDate(oldDate, value)) {\n                this._valueChange.emit(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"min\", {\n        /** The minimum valid date. */\n        get: /**\n         * The minimum valid date.\n         * @return {?}\n         */\n        function () { return this._min; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"max\", {\n        /** The maximum valid date. */\n        get: /**\n         * The maximum valid date.\n         * @return {?}\n         */\n        function () { return this._max; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"disabled\", {\n        /** Whether the datepicker-input is disabled. */\n        get: /**\n         * Whether the datepicker-input is disabled.\n         * @return {?}\n         */\n        function () { return !!this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            /** @type {?} */\n            var element = this._elementRef.nativeElement;\n            if (this._disabled !== newValue) {\n                this._disabled = newValue;\n                this._disabledChange.emit(newValue);\n            }\n            // We need to null check the `blur` method, because it's undefined during SSR.\n            if (newValue && element.blur) {\n                // Normally, native input elements automatically blur if they turn disabled. This behavior\n                // is problematic, because it would mean that it triggers another change detection cycle,\n                // which then causes a changed after checked error if the input element was focused before.\n                element.blur();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._datepickerSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this._valueChange.complete();\n        this._disabledChange.complete();\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnValidatorChange = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._validatorOnChange = fn;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.validate = /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this._validator ? this._validator(c) : null;\n    };\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     */\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.getPopupConnectionElementRef = /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n    function () {\n        return this.getConnectedOverlayOrigin();\n    };\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    MatDatepickerInput.prototype.getConnectedOverlayOrigin = /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    function () {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.writeValue = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnChange = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._cvaOnChange = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnTouched = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onTouched = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.setDisabledState = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onKeydown = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n            this._datepicker.open();\n            event.preventDefault();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\n        date = this._getValidDateOrNull(date);\n        if (!this._dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this._cvaOnChange(date);\n            this._valueChange.emit(date);\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n        else {\n            this._validatorOnChange();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onChange = /**\n     * @return {?}\n     */\n    function () {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    };\n    /** Returns the palette used by the input's form field, if any. */\n    /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._getThemePalette = /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n    function () {\n        return this._formField ? this._formField.color : undefined;\n    };\n    /** Handles blur events on the input. */\n    /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onBlur = /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n    function () {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this._formatValue(this.value);\n        }\n        this._onTouched();\n    };\n    /** Formats a value and sets it on the input element. */\n    /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._formatValue = /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._elementRef.nativeElement.value =\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatDatepickerInput.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    MatDatepickerInput.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[matDatepicker]',\n                    providers: [\n                        MAT_DATEPICKER_VALUE_ACCESSOR,\n                        MAT_DATEPICKER_VALIDATORS,\n                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                    ],\n                    host: {\n                        '[attr.aria-haspopup]': 'true',\n                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event.target.value)',\n                        '(change)': '_onChange()',\n                        '(blur)': '_onBlur()',\n                        '(keydown)': '_onKeydown($event)',\n                    },\n                    exportAs: 'matDatepickerInput',\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepickerInput.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: MatFormField, decorators: [{ type: Optional }] }\n    ]; };\n    MatDatepickerInput.propDecorators = {\n        matDatepicker: [{ type: Input }],\n        matDatepickerFilter: [{ type: Input }],\n        value: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        disabled: [{ type: Input }],\n        dateChange: [{ type: Output }],\n        dateInput: [{ type: Output }]\n    };\n    return MatDatepickerInput;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\nvar MatDatepickerToggleIcon = /** @class */ (function () {\n    function MatDatepickerToggleIcon() {\n    }\n    MatDatepickerToggleIcon.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matDatepickerToggleIcon]'\n                },] },\n    ];\n    return MatDatepickerToggleIcon;\n}());\n/**\n * @template D\n */\nvar MatDatepickerToggle = /** @class */ (function () {\n    function MatDatepickerToggle(_intl, _changeDetectorRef, defaultTabIndex) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._stateChanges = Subscription.EMPTY;\n        /** @type {?} */\n        var parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n    Object.defineProperty(MatDatepickerToggle.prototype, \"disabled\", {\n        /** Whether the toggle button is disabled. */\n        get: /**\n         * Whether the toggle button is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (changes['datepicker']) {\n            this._watchStateChanges();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.unsubscribe();\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._watchStateChanges();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype._open = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype._watchStateChanges = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n        /** @type {?} */\n        var inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n            this.datepicker._datepickerInput._disabledChange : of();\n        /** @type {?} */\n        var datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            of();\n        this._stateChanges.unsubscribe();\n        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n    };\n    MatDatepickerToggle.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker-toggle',\n                    template: \"<button #button mat-icon-button type=\\\"button\\\" aria-haspopup=\\\"true\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" [disableRipple]=\\\"disableRipple\\\" (click)=\\\"_open($event)\\\"><svg *ngIf=\\\"!_customIcon\\\" class=\\\"mat-datepicker-toggle-default-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" fill=\\\"currentColor\\\" focusable=\\\"false\\\"><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg><ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content></button>\",\n                    styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n                    host: {\n                        'class': 'mat-datepicker-toggle',\n                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n                        // consumer may have provided, while still being able to receive focus.\n                        '[attr.tabindex]': '-1',\n                        '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                        '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                        '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                        '(focus)': '_button.focus()',\n                    },\n                    exportAs: 'matDatepickerToggle',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepickerToggle.ctorParameters = function () { return [\n        { type: MatDatepickerIntl },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n    ]; };\n    MatDatepickerToggle.propDecorators = {\n        datepicker: [{ type: Input, args: ['for',] }],\n        tabIndex: [{ type: Input }],\n        disabled: [{ type: Input }],\n        disableRipple: [{ type: Input }],\n        _customIcon: [{ type: ContentChild, args: [MatDatepickerToggleIcon,] }],\n        _button: [{ type: ViewChild, args: ['button',] }]\n    };\n    return MatDatepickerToggle;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatDatepickerModule = /** @class */ (function () {\n    function MatDatepickerModule() {\n    }\n    MatDatepickerModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        MatButtonModule,\n                        MatDialogModule,\n                        OverlayModule,\n                        A11yModule,\n                        PortalModule,\n                    ],\n                    exports: [\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                    ],\n                    declarations: [\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                    ],\n                    providers: [\n                        MatDatepickerIntl,\n                        MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                    ],\n                    entryComponents: [\n                        MatDatepickerContent,\n                        MatCalendarHeader,\n                    ]\n                },] },\n    ];\n    return MatDatepickerModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContentBase, _MatDatepickerContentMixinBase, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView, MatMultiYearView as Éµa34 };\n//# sourceMappingURL=datepicker.es5.js.map\n"],"sourceRoot":""}
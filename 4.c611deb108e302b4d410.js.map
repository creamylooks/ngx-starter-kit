{"version":3,"sources":["webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm5/select.es5.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm5/table.es5.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/cdk/esm5/table.es5.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/select/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/select/typings/index.d.ts.MatSelect.html"],"names":["__webpack_require__","d","__webpack_exports__","MatSelectModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_SCROLL_STRATEGY","MatSelect","tslib__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__","_angular_core__WEBPACK_IMPORTED_MODULE_7__","_angular_material_core__WEBPACK_IMPORTED_MODULE_8__","rxjs__WEBPACK_IMPORTED_MODULE_9__","rxjs__WEBPACK_IMPORTED_MODULE_10__","rxjs__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_12__","rxjs_operators__WEBPACK_IMPORTED_MODULE_13__","rxjs_operators__WEBPACK_IMPORTED_MODULE_14__","rxjs_operators__WEBPACK_IMPORTED_MODULE_15__","rxjs_operators__WEBPACK_IMPORTED_MODULE_16__","rxjs_operators__WEBPACK_IMPORTED_MODULE_17__","rxjs_operators__WEBPACK_IMPORTED_MODULE_18__","nextUniqueId","SELECT_MULTIPLE_PANEL_PADDING_X","overlay","scrollStrategies","reposition","MatSelectChange","source","value","this","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","Object","options","apply","map","option","onSelectionChange","onStable","asObservable","pipe","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","id","defineProperty","prototype","get","set","enumerable","configurable","_placeholder","stateChanges","next","_selectionModel","Error","fn","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","multiple","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","disabled","ngOnDestroy","complete","toggle","close","open","length","_triggerRect","trigger","nativeElement","getBoundingClientRect","getComputedStyle","fontSize","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","style","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","manager","altKey","preventDefault","selectedOption","setFirstItemActive","setLastItemActive","onKeydown","announce","activeItem","ctrlKey","hasDeselectedOptions_1","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","SELECT_PANEL_PADDING_X","offsetWidth","isEmpty","Promise","resolve","then","Array","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","_getOptionIndex","reduce","result","current","index","undefined","itemHeight","items","_getItemCount","panelHeight","Math","min","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","max","_getAriaLabel","ariaLabelledby","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","MatTableModule","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatTable","MatHeaderRowDef","MatRowDef","MatHeaderRow","MatFooterRow","MatRow","MatTableDataSource","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","arguments","stickyCssClass","columnDef","classList","add","cssClassFriendlyName","MAX_SAFE_INTEGER","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","EMPTY","sortingDataAccessor","data","sortHeaderId","numberValue","Number","sortData","active","direction","valueA","valueB","comparatorResult","filterPredicate","filter","dataStr","keys","currentTerm","key","toLowerCase","transformedFilter","trim","_data","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","slice","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","connect","disconnect","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","CdkTable","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkCellOutlet","CdkHeaderRow","CdkFooterRow","CdkRow","CdkTableModule","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","mixinHasStickyInput","base","class_1","args","_i","_sticky","_hasStickyChanged","v","prevValue","hasStickyChanged","resetStickyChanged","template","_stickyEnd","_name","name","replace","BaseCdkCell","BaseRowDef","_differs","_columnsDiffer","columns","create","diff","getColumnsDiff","extractCellTemplate","column","headerCell","footerCell","cell","CdkHeaderRowDefBase","CdkFooterRowDefBase","_viewContainer","mostRecentCellOutlet","getTableUnknownColumnError","STICKY_DIRECTIONS","StickyStyler","isNativeHtmlTable","stickCellCss","_isBrowser","clearStickyPositioning","rows","stickyDirections","rows_1","row","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","updateStickyColumns","stickyStartStates","stickyEndStates","hasStickyColumns","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","rows_2","_addStickyStyle","stickRows","rowsToStick","stickyStates","position","stickyHeight","rowIndex","j","updateStickyFooterContainer","tableElement","tfoot","element","stickyDirections_1","zIndex","_getCalculatedZIndex","dir","remove","dirValue","cssText","zIndexIncrements","STICKY_DIRECTIONS_1","firstRowCells","push","widths","positions","nextPosition","viewContainer","role","_document","_platform","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","_multiTemplateDataRows","viewChange","start","end","MAX_VALUE","setAttribute","_isNativeHtmlTable","nodeName","_trackByFn","JSON","stringify","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","dataRow","trackBy","dataIndex","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","move","_updateRowIndexContext","forEachIdentityChange","context","$implicit","updateStickyColumnStyles","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","_stickyStyler","def","sticky","updateStickyFooterRowStyles","footerRows","dataRows","concat","headerRow","_addStickyColumnStyles","footerRow","from","values","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","has","WeakMap","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeQueryListAndSet","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","when","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","acc","_renderRow","columnDefs","columnName","stickyEnd","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","getTableMissingMatchingRowDefError","renderIndex","outlet","createEmbeddedView","_b","_getCellTemplates","count","last","even","odd","columnId","documentRef","document","documentFragment","createDocumentFragment","sections_1","tag","section","createElement","appendChild","stickyCheckReducer","isBrowser","queryList","RenderType_MatSelect","View_MatSelect_0","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__","encapsulation","styles","animation","type","definitions","transform","minWidth","opacity","offset","expr","timings","View_MatSelect_1","_l","_ck","_v","component","View_MatSelect_3","triggerValue","View_MatSelect_4","View_MatSelect_2","ngSwitch","ngSwitchCase","customTrigger","View_MatSelect_5","en","$event","ad","_co","toState","klass","ngClass","panelClass","origin","offsetY","backdropClass","scrollStrategy","hasBackdrop","lockPosition","backdropClick","attach","detach"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAAN,EAAA,YAAAO,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAAAU,EAAAV,EAAA,QAAAW,EAAAX,EAAA,QAAAY,GAAAZ,EAAA,QAAAA,EAAA,SAAAa,EAAAb,EAAA,QAAAc,EAAAd,EAAA,QAAAe,EAAAf,EAAA,QAAAgB,EAAAhB,EAAA,QAAAiB,EAAAjB,EAAA,QAAAkB,EAAAlB,EAAA,QAAAmB,EAAAnB,EAAA,QAAAoB,EAAApB,EAAA,QAAAqB,EAAArB,EAAA,QAAAsB,EAAAtB,EAAA,QAAAuB,EAAAvB,EAAA,QAwIIwB,EAAe,EAgCfC,EAAkC,EAWlCpB,EAA6B,IAAIO,EAAA,EAAe,8BAMpD,SAASR,EAA4CsB,GACjD,OAAO,WAAc,OAAOA,EAAQC,iBAAiBC,cAMzD,IAWAC,EAAiC,WAK7B,OAJA,SAAyBC,EAAQC,GAC7BC,KAAKF,OAASA,EACdE,KAAKD,MAAQA,GAHW,GAgBhCE,EAA+B,WAQ3B,OAPA,SAAuBC,EAAaC,EAA2BC,EAAaC,EAAkBC,GAC1FN,KAAKE,YAAcA,EACnBF,KAAKG,0BAA4BA,EACjCH,KAAKI,YAAcA,EACnBJ,KAAKK,iBAAmBA,EACxBL,KAAKM,UAAYA,GANK,GAyB1BhC,EAA2B,SAAUiC,GAErC,SAASjC,EAAUkC,EAAgBC,EAAoBC,EAASP,EAA2BQ,EAAYC,EAAMR,EAAaC,EAAkBQ,EAAkBP,EAAWQ,EAAUC,EAAuBC,GACtM,IAAIC,EAAQV,EAAOW,KAAKlB,KAAMW,EAAYR,EAA2BC,EAAaC,EAAkBC,IAAcN,KA8IlH,OA7IAiB,EAAMT,eAAiBA,EACvBS,EAAMR,mBAAqBA,EAC3BQ,EAAMP,QAAUA,EAChBO,EAAML,KAAOA,EACbK,EAAMJ,iBAAmBA,EACzBI,EAAMX,UAAYA,EAClBW,EAAMD,eAAiBA,EAIvBC,EAAME,YAAa,EAInBF,EAAMG,WAAY,EAIlBH,EAAMI,WAAa,EAInBJ,EAAMK,WAAY,EAIlBL,EAAMM,aAAe,SAAUC,EAAIC,GAAM,OAAOD,IAAOC,GAIvDR,EAAMS,KAAO,cAAgBlC,IAI7ByB,EAAMU,SAAW,IAAI7C,EAAA,EAIrBmC,EAAMW,iBAAmB,EAIzBX,EAAMY,UAAY,aAIlBZ,EAAMa,WAAa,aAInBb,EAAMc,WAAa,GAInBd,EAAMe,iBAAmB,MAIzBf,EAAMgB,0BAA4B,IAAInD,EAAA,EAMtCmC,EAAMiB,SAAW,EAOjBjB,EAAMkB,WAAa,CACf,CACIC,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,OAEd,CACIH,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,WAMlBtB,EAAMuB,yBAA0B,EAChCvB,EAAMwB,UAAW,EAIjBxB,EAAMyB,YAAc,aAIpBzB,EAAM0B,UAAY,GAIlB1B,EAAM2B,uBAAyBC,OAAA9D,EAAA,EAAA8D,CAAM,WACjC,OAAI5B,EAAM6B,QACC9D,EAAA,EAAM+D,WAAM,EAAQ9B,EAAM6B,QAAQE,IAAI,SAAUC,GAAU,OAAOA,EAAOC,qBAE5EjC,EAAMP,QAAQyC,SAChBC,eACAC,KAAKR,OAAA5D,EAAA,EAAA4D,CAAK,GAAIA,OAAA3D,EAAA,EAAA2D,CAAU,WAAc,OAAO5B,EAAM2B,4BAK5D3B,EAAMqC,aAAe,IAAI1E,EAAA,EAIzBqC,EAAMsC,cAAgBtC,EAAMqC,aAAaD,KAAKR,OAAA1D,EAAA,EAAA0D,CAAO,SAAUW,GAAK,OAAOA,IAAOX,OAAAzD,EAAA,EAAAyD,CAAI,eAItF5B,EAAMwC,cAAgBxC,EAAMqC,aAAaD,KAAKR,OAAA1D,EAAA,EAAA0D,CAAO,SAAUW,GAAK,OAAQA,IAAOX,OAAAzD,EAAA,EAAAyD,CAAI,eAIvF5B,EAAMyC,gBAAkB,IAAI9E,EAAA,EAM5BqC,EAAM0C,YAAc,IAAI/E,EAAA,EACpBqC,EAAMX,YAGNW,EAAMX,UAAUsD,cAAgB3C,GAEpCA,EAAM4C,uBAAyB9C,EAC/BE,EAAM6C,gBAAkB7C,EAAM4C,yBAC9B5C,EAAMH,SAAWiD,SAASjD,IAAa,EAEvCG,EAAM+C,GAAK/C,EAAM+C,GACV/C,EA0jDX,OA1sDA4B,OAAAtE,EAAA,UAAAsE,CAAUvE,EAAWiC,GAkJrBsC,OAAOoB,eAAe3F,EAAU4F,UAAW,UAAW,CAElDC,IAIA,WACI,OAAOnE,KAAKyC,UAAYzC,KAAKmB,YAMjCiD,IAMA,SAAUrE,GACNC,KAAKyC,SAAW1C,GAEpBsE,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,cAAe,CAEtDC,IAIA,WAAc,OAAOnE,KAAKuE,cAC1BH,IAIA,SAAUrE,GACNC,KAAKuE,aAAexE,EACpBC,KAAKwE,aAAaC,QAEtBJ,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,WAAY,CAEnDC,IAIA,WAAc,OAAOnE,KAAKoB,WAC1BgD,IAIA,SAAUrE,GACNC,KAAKoB,UAAYyB,OAAApE,EAAA,EAAAoE,CAAsB9C,GACvCC,KAAKwE,aAAaC,QAEtBJ,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,WAAY,CAEnDC,IAIA,WAAc,OAAOnE,KAAKsB,WAC1B8C,IAIA,SAAUrE,GACN,GAAIC,KAAK0E,gBACL,MApWLC,MAAM,iEAsWL3E,KAAKsB,UAAYuB,OAAApE,EAAA,EAAAoE,CAAsB9C,IAE3CsE,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,yBAA0B,CAEjEC,IAIA,WAAc,OAAOnE,KAAKwC,yBAC1B4B,IAIA,SAAUrE,GACNC,KAAKwC,wBAA0BK,OAAApE,EAAA,EAAAoE,CAAsB9C,IAEzDsE,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,cAAe,CAMtDC,IAMA,WAAc,OAAOnE,KAAKuB,cAC1B6C,IAIA,SAAUQ,GACN,GAAkB,mBAAPA,EACP,MA5XLD,MAAM,qCA8XL3E,KAAKuB,aAAeqD,EAChB5E,KAAK0E,iBAEL1E,KAAK6E,wBAGbR,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,QAAS,CAEhDC,IAIA,WAAc,OAAOnE,KAAK8E,QAC1BV,IAIA,SAAUW,GACFA,IAAa/E,KAAK8E,SAClB9E,KAAKgF,WAAWD,GAChB/E,KAAK8E,OAASC,IAGtBV,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,KAAM,CAE7CC,IAIA,WAAc,OAAOnE,KAAKiF,KAC1Bb,IAIA,SAAUrE,GACNC,KAAKiF,IAAMlF,GAASC,KAAK0B,KACzB1B,KAAKwE,aAAaC,QAEtBJ,YAAY,EACZC,cAAc,IAKlBhG,EAAU4F,UAAUgB,SAGpB,WACI,IAAIjE,EAAQjB,KACZA,KAAK0E,gBAAkB,IAAIhG,EAAA,EAAesB,KAAKmF,UAC/CnF,KAAKwE,aAAaC,OAIlBzE,KAAKiC,0BACAoB,KAAKR,OAAAxD,EAAA,EAAAwD,GAAwBA,OAAAvD,EAAA,EAAAuD,CAAU7C,KAAK2B,WAC5CyD,UAAU,WACPnE,EAAMoE,WACNpE,EAAMI,WAAa,EACnBJ,EAAMqC,aAAagC,MAAK,KAGxBrE,EAAMqC,aAAagC,MAAK,GACxBrE,EAAMsE,WAAWC,QAAU,EAC3BvE,EAAMR,mBAAmBgF,mBAOrCnH,EAAU4F,UAAUwB,mBAGpB,WACI,IAAIzE,EAAQjB,KACZA,KAAK2F,kBACL3F,KAAK0E,gBAAgBkB,SAASvC,KAAKR,OAAAvD,EAAA,EAAAuD,CAAU7C,KAAK2B,WAAWyD,UAAU,SAAUS,GAC7EA,EAAMC,MAAMC,QAAQ,SAAU9C,GAAU,OAAOA,EAAO+C,WACtDH,EAAMI,QAAQF,QAAQ,SAAU9C,GAAU,OAAOA,EAAOiD,eAE5DlG,KAAK8C,QAAQqD,QAAQ9C,KAAKR,OAAAtD,EAAA,EAAAsD,CAAU,MAAOA,OAAAvD,EAAA,EAAAuD,CAAU7C,KAAK2B,WAAWyD,UAAU,WAC3EnE,EAAMmF,gBACNnF,EAAM4D,0BAMdvG,EAAU4F,UAAUmC,UAGpB,WACQrG,KAAKM,WACLN,KAAKsG,oBAObhI,EAAU4F,UAAUqC,YAIpB,SAAUJ,GAGFA,EAAQK,UACRxG,KAAKwE,aAAaC,QAM1BnG,EAAU4F,UAAUuC,YAGpB,WACIzG,KAAK2B,SAAS8C,OACdzE,KAAK2B,SAAS+E,WACd1G,KAAKwE,aAAakC,YAOtBpI,EAAU4F,UAAUyC,OAIpB,WACI3G,KAAKqF,UAAYrF,KAAK4G,QAAU5G,KAAK6G,QAOzCvI,EAAU4F,UAAU2C,KAIpB,WACI,IAAI5F,EAAQjB,MACRA,KAAKwG,UAAaxG,KAAK8C,SAAY9C,KAAK8C,QAAQgE,SAAU9G,KAAKmB,aAGnEnB,KAAK+G,aAAe/G,KAAKgH,QAAQC,cAAcC,wBAG/ClH,KAAK4B,iBAAmBmC,SAASoD,iBAAiBnH,KAAKgH,QAAQC,eAAeG,UAAY,KAC1FpH,KAAKmB,YAAa,EAClBnB,KAAKqH,YAAYC,0BAA0B,MAC3CtH,KAAKuH,4BACLvH,KAAKwH,0BACLxH,KAAKS,mBAAmBgF,eAExBzF,KAAKU,QAAQyC,SAASC,eAAeC,KAAKR,OAAA5D,EAAA,EAAA4D,CAAK,IAAIuC,UAAU,WACrDnE,EAAMW,kBAAoBX,EAAMsE,WAAWkC,YAC3CxG,EAAMsE,WAAWkC,WAAWC,iBAC5BzG,EAAMsE,WAAWkC,WAAWC,eAAeC,MAAMP,SAAWnG,EAAMW,iBAAmB,UASjGtD,EAAU4F,UAAU0C,MAIpB,WACQ5G,KAAKmB,aACLnB,KAAKmB,YAAa,EAClBnB,KAAKqH,YAAYC,0BAA0BtH,KAAK4H,SAAW,MAAQ,OACnE5H,KAAKS,mBAAmBgF,eACxBzF,KAAK8B,eAgBbxD,EAAU4F,UAAUc,WAOpB,SAAUjF,GACFC,KAAK8C,SACL9C,KAAK6H,qBAAqB9H,IAkBlCzB,EAAU4F,UAAU4D,iBAQpB,SAAUlD,GACN5E,KAAK6B,UAAY+C,GAiBrBtG,EAAU4F,UAAU6D,kBAQpB,SAAUnD,GACN5E,KAAK8B,WAAa8C,GAetBtG,EAAU4F,UAAU8D,iBAOpB,SAAUC,GACNjI,KAAKwG,SAAWyB,EAChBjI,KAAKS,mBAAmBgF,eACxBzF,KAAKwE,aAAaC,QAEtB5B,OAAOoB,eAAe3F,EAAU4F,UAAW,YAAa,CAEpDC,IAIA,WACI,OAAOnE,KAAKmB,YAEhBkD,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,WAAY,CAEnDC,IAIA,WACI,OAAOnE,KAAKmF,SAAWnF,KAAK0E,gBAAgBwD,SAAWlI,KAAK0E,gBAAgBwD,SAAS,IAEzF7D,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe3F,EAAU4F,UAAW,eAAgB,CAEvDC,IAIA,WACI,GAAInE,KAAKmI,MACL,MAAO,GAEX,GAAInI,KAAKsB,UAAW,CAEhB,IAAI8G,EAAkBpI,KAAK0E,gBAAgBwD,SAASlF,IAAI,SAAUC,GAAU,OAAOA,EAAOoF,YAK1F,OAJIrI,KAAK4H,UACLQ,EAAgBE,UAGbF,EAAgBG,KAAK,MAEhC,OAAOvI,KAAK0E,gBAAgBwD,SAAS,GAAGG,WAE5ChE,YAAY,EACZC,cAAc,IAOlBhG,EAAU4F,UAAU0D,OAIpB,WACI,QAAO5H,KAAKY,MAA2B,QAApBZ,KAAKY,KAAKb,OAQjCzB,EAAU4F,UAAUsE,eAKpB,SAAU3C,GACD7F,KAAKwG,WACNxG,KAAKqF,UAAYrF,KAAKyI,mBAAmB5C,GAAS7F,KAAK0I,qBAAqB7C,KAUpFvH,EAAU4F,UAAUwE,qBAMpB,SAAU7C,GAEN,IAAI8C,EAAU9C,EAAM8C,QAEhBC,EAAaD,IAAYhK,EAAA,GAAcgK,IAAYhK,EAAA,GACnDgK,IAAYhK,EAAA,GAAcgK,IAAYhK,EAAA,EAItCkK,EAAU7I,KAAKqH,YAEnB,IAJgBsB,IAAYhK,EAAA,GAASgK,IAAYhK,EAAA,KAI9BkE,OAAAlE,EAAA,EAAAkE,CAAegD,KAAa7F,KAAKmF,UAAYU,EAAMiD,SAAWF,EAC7E/C,EAAMkD,iBACN/I,KAAK6G,YAEJ,IAAK7G,KAAKmF,SAAU,CAErB,IAAI6D,EAAiBhJ,KAAKkI,SACtBS,IAAYhK,EAAA,GAAQgK,IAAYhK,EAAA,GAChCgK,IAAYhK,EAAA,EAAOkK,EAAQI,qBAAuBJ,EAAQK,oBAC1DrD,EAAMkD,kBAGNF,EAAQM,UAAUtD,GAIlB7F,KAAKgB,gBAAkBgI,IAAmBhJ,KAAKkI,UAC/ClI,KAAKgB,eAAeoI,SAA6BpJ,KAAe,SAAEqI,aAW9E/J,EAAU4F,UAAUuE,mBAMpB,SAAU5C,GAEN,IAAI8C,EAAU9C,EAAM8C,QAEhBC,EAAaD,IAAYhK,EAAA,GAAcgK,IAAYhK,EAAA,EAEnDkK,EAAU7I,KAAKqH,YACnB,GAAIsB,IAAYhK,EAAA,GAAQgK,IAAYhK,EAAA,EAChCkH,EAAMkD,iBACNJ,IAAYhK,EAAA,EAAOkK,EAAQI,qBAAuBJ,EAAQK,yBAEzD,GAAIN,GAAc/C,EAAMiD,OAEzBjD,EAAMkD,iBACN/I,KAAK4G,aAEJ,GAAK+B,IAAYhK,EAAA,GAASgK,IAAYhK,EAAA,IAAUkK,EAAQQ,YACxDxG,OAAAlE,EAAA,EAAAkE,CAAegD,GAIf,GAAI7F,KAAKsB,WAAaqH,IAAYhK,EAAA,GAAKkH,EAAMyD,QAAS,CACvDzD,EAAMkD,iBAEN,IAAIQ,EAAyBvJ,KAAK8C,QAAQ0G,KAAK,SAAUC,GAAO,OAAQA,EAAIjD,WAAaiD,EAAIvB,WAC7FlI,KAAK8C,QAAQiD,QAAQ,SAAU9C,GACtBA,EAAOuD,WACR+C,EAAyBtG,EAAO+C,SAAW/C,EAAOiD,kBAIzD,CAED,IAAIwD,EAAyBb,EAAQc,gBACrCd,EAAQM,UAAUtD,GACd7F,KAAKsB,WAAasH,GAAc/C,EAAM+D,UAAYf,EAAQQ,YAC1DR,EAAQc,kBAAoBD,GAC5Bb,EAAQQ,WAAWQ,6BAnBvBhE,EAAMkD,iBACNF,EAAQQ,WAAWQ,yBAyB3BvL,EAAU4F,UAAU4F,SAGpB,WACS9J,KAAKwG,WACNxG,KAAKyC,UAAW,EAChBzC,KAAKwE,aAAaC,SAY1BnG,EAAU4F,UAAU6F,QAKpB,WACI/J,KAAKyC,UAAW,EACXzC,KAAKwG,UAAaxG,KAAKqF,YACxBrF,KAAK8B,aACL9B,KAAKS,mBAAmBgF,eACxBzF,KAAKwE,aAAaC,SAU1BnG,EAAU4F,UAAU8F,YAIpB,WACI,IAAI/I,EAAQjB,KACZA,KAAKuF,WAAW0E,eAAe5G,KAAKR,OAAA5D,EAAA,EAAA4D,CAAK,IAAIuC,UAAU,WACnDnE,EAAMiJ,gCACNjJ,EAAMR,mBAAmB0J,gBACzBlJ,EAAMmJ,2BACNnJ,EAAMoJ,MAAMpD,cAAcqD,UAAYrJ,EAAMI,cAQpD/C,EAAU4F,UAAUqG,eAIpB,WACI,OAAOvK,KAAKa,iBAAmB,OAASb,KAAKa,iBAAiB2J,MAAQ,IAU1ElM,EAAU4F,UAAUgG,8BAOpB,WACI,IAAKzK,GAAmCO,KAAKmF,SAAU,CAEnD,IAAIsF,EAAiBzK,KAAKqK,MAAMpD,cAAcyD,cAAc,wBACxDD,IACAhL,EAAkCkL,GAA+BF,EAAeG,eAI5F/H,OAAOoB,eAAe3F,EAAU4F,UAAW,QAAS,CAEhDC,IAIA,WACI,OAAQnE,KAAK0E,iBAAmB1E,KAAK0E,gBAAgBmG,WAEzDxG,YAAY,EACZC,cAAc,IAMlBhG,EAAU4F,UAAUW,qBAIpB,WACI,IAAI5D,EAAQjB,KAGZ8K,QAAQC,UAAUC,KAAK,WACnB/J,EAAM4G,qBAAqB5G,EAAMX,UAAYW,EAAMX,UAAUP,MAAQkB,EAAM6D,QAC3E7D,EAAMuD,aAAaC,UAc3BnG,EAAU4F,UAAU2D,qBAOpB,SAAU9H,GACN,IAAIkB,EAAQjB,KACZ,GAAIA,KAAKmF,UAAYpF,EAAO,CACxB,IAAKkL,MAAMC,QAAQnL,GACf,MAt+BL4E,MAAM,sDAw+BL3E,KAAK0E,gBAAgByG,QACrBpL,EAAMgG,QAAQ,SAAUqF,GAAgB,OAAOnK,EAAMoK,aAAaD,KAClEpL,KAAKsL,kBAEJ,CACDtL,KAAK0E,gBAAgByG,QAErB,IAAII,EAAsBvL,KAAKqL,aAAatL,GAGxCwL,GACAvL,KAAKqH,YAAYmE,cAAcD,GAGvCvL,KAAKS,mBAAmBgF,gBAY5BnH,EAAU4F,UAAUmH,aAMpB,SAAUtL,GACN,IAAIkB,EAAQjB,KAERuL,EAAsBvL,KAAK8C,QAAQ2I,KAAK,SAAUxI,GAClD,IAEI,OAAuB,MAAhBA,EAAOlD,OAAiBkB,EAAMM,aAAa0B,EAAOlD,MAAOA,GAEpE,MAAO2L,GAKH,OAJI7I,OAAAjE,EAAA,GAAAiE,IAEA8I,QAAQC,KAAKF,IAEV,KAMf,OAHIH,GACAvL,KAAK0E,gBAAgBsB,OAAOuF,GAEzBA,GAQXjN,EAAU4F,UAAUyB,gBAKpB,WACI,IAAI1E,EAAQjB,KACZA,KAAKqH,YAAc,IAAI7I,EAAA,EAA2BwB,KAAK8C,SAClD+I,gBACAC,0BACAxE,0BAA0BtH,KAAK4H,SAAW,MAAQ,OAClDmE,wBAAwB,CAAC,aAC9B/L,KAAKqH,YAAY2E,OAAO3I,KAAKR,OAAAvD,EAAA,EAAAuD,CAAU7C,KAAK2B,WAAWyD,UAAU,WAG7DnE,EAAMgL,QACNhL,EAAM2F,UAEV5G,KAAKqH,YAAY6E,OAAO7I,KAAKR,OAAAvD,EAAA,EAAAuD,CAAU7C,KAAK2B,WAAWyD,UAAU,WACzDnE,EAAME,YAAcF,EAAMoJ,MAC1BpJ,EAAMkL,8BAEAlL,EAAME,YAAeF,EAAMkE,WAAYlE,EAAMoG,YAAYgC,YAC/DpI,EAAMoG,YAAYgC,WAAWQ,2BAUzCvL,EAAU4F,UAAUkC,cAKpB,WACI,IAAInF,EAAQjB,KAERoM,EAAqBvJ,OAAA7D,EAAA,EAAA6D,CAAM7C,KAAK8C,QAAQqD,QAASnG,KAAK2B,UAC1D3B,KAAK4C,uBAAuBS,KAAKR,OAAAvD,EAAA,EAAAuD,CAAUuJ,IAAqBhH,UAAU,SAAUS,GAChF5E,EAAMoL,UAAUxG,EAAM/F,OAAQ+F,EAAMyG,aAChCzG,EAAMyG,cAAgBrL,EAAMkE,UAAYlE,EAAME,aAC9CF,EAAM2F,QACN3F,EAAMgL,WAKdjN,EAAA,EAAM+D,WAAM,EAAQ/C,KAAK8C,QAAQE,IAAI,SAAUC,GAAU,OAAOA,EAAOsJ,iBAAmBlJ,KAAKR,OAAAvD,EAAA,EAAAuD,CAAUuJ,IACpGhH,UAAU,WACXnE,EAAMR,mBAAmBgF,eACzBxE,EAAMuD,aAAaC,SAEvBzE,KAAKwM,iBAUTlO,EAAU4F,UAAUmI,UAOpB,SAAUpJ,EAAQqJ,GAEd,IAAIG,EAAczM,KAAK0E,gBAAgBgI,WAAWzJ,GAC9B,MAAhBA,EAAOlD,OAAkBC,KAAKsB,WAM9B2B,EAAOiF,SAAWlI,KAAK0E,gBAAgBsB,OAAO/C,GAAUjD,KAAK0E,gBAAgBwB,SAASjD,GAClFqJ,GACAtM,KAAKqH,YAAYmE,cAAcvI,GAE/BjD,KAAKmF,WACLnF,KAAKsL,cACDgB,GAKAtM,KAAKiM,WAhBbhJ,EAAOiD,WACPlG,KAAK0E,gBAAgByG,QACrBnL,KAAK2M,kBAAkB1J,EAAOlD,QAkB9B0M,IAAgBzM,KAAK0E,gBAAgBgI,WAAWzJ,IAChDjD,KAAK2M,oBAET3M,KAAKwE,aAAaC,QAQtBnG,EAAU4F,UAAUoH,YAKpB,WACI,IAAIrK,EAAQjB,KACZ,GAAIA,KAAKmF,SAAU,CAEf,IAAIyH,EAAY5M,KAAK8C,QAAQ+J,UAC7B7M,KAAK0E,gBAAgBoI,KAAK,SAAUC,EAAGC,GACnC,OAAO/L,EAAMgM,eAAiBhM,EAAMgM,eAAeF,EAAGC,EAAGJ,GACrDA,EAAUM,QAAQH,GAAKH,EAAUM,QAAQF,KAEjDhN,KAAKwE,aAAaC,SAU1BnG,EAAU4F,UAAUyI,kBAMpB,SAAUQ,GAEN,IAAIC,EAEAA,EADApN,KAAKmF,SAC6BnF,KAAe,SAAEgD,IAAI,SAAUC,GAAU,OAAOA,EAAOlD,QAG3EC,KAAKkI,SAA+BlI,KAAe,SAAED,MAAQoN,EAE/EnN,KAAK8E,OAASsI,EACdpN,KAAK2D,YAAY2B,KAAK8H,GACtBpN,KAAK6B,UAAUuL,GACfpN,KAAK0D,gBAAgB4B,KAAK,IAAIzF,EAAgBG,KAAMoN,IACpDpN,KAAKS,mBAAmBgF,gBAQ5BnH,EAAU4F,UAAUsI,cAKpB,WACIxM,KAAK+B,WAAa/B,KAAK8C,QAAQE,IAAI,SAAUC,GAAU,OAAOA,EAAOe,KAAOuE,KAAK,MAYrFjK,EAAU4F,UAAUsD,wBAMpB,WACQxH,KAAKqH,cACDrH,KAAKmI,MACLnI,KAAKqH,YAAY4B,qBAGjBjJ,KAAKqH,YAAYmE,cAAcxL,KAAK0E,gBAAgBwD,SAAS,MAUzE5J,EAAU4F,UAAUiI,4BAKpB,WAEI,IAAIkB,EAAoBrN,KAAKqH,YAAYsC,iBAAmB,EAExD2D,EAAazK,OAAAhE,EAAA,EAAAgE,CAA8BwK,EAAmBrN,KAAK8C,QAAS9C,KAAKuN,cACrFvN,KAAKqK,MAAMpD,cAAcqD,UAAYzH,OAAAhE,EAAA,EAAAgE,CAAyBwK,EAAoBC,EAAYtN,KAAKwN,iBAAkBxN,KAAKqK,MAAMpD,cAAcqD,UA9tCxH,MAquC1BhM,EAAU4F,UAAU+H,MAIpB,WACIjM,KAAKE,YAAY+G,cAAcgF,SASnC3N,EAAU4F,UAAUuJ,gBAMpB,SAAUxK,GACN,OAAOjD,KAAK8C,QAAQ4K,OAAO,SAAUC,EAAQC,EAASC,GAClD,YAAkBC,IAAXH,EAAwB1K,IAAW2K,EAAUC,OAAQC,EAAaH,QAC1EG,IAQPxP,EAAU4F,UAAUqD,0BAKpB,WAEI,IAAIwG,EAAa/N,KAAKwN,iBAElBQ,EAAQhO,KAAKiO,gBAEbC,EAAcC,KAAKC,IAAIJ,EAAQD,EA/wCb,KAoxClBM,EAHwBL,EAAQD,EAGIG,EAGpCI,EAAuBtO,KAAKmI,MAAQ,EAAuBnI,KAAKyN,gBAAgBzN,KAAK0E,gBAAgBwD,SAAS,IAClHoG,GAAwBzL,OAAAhE,EAAA,EAAAgE,CAA8ByL,EAAsBtO,KAAK8C,QAAS9C,KAAKuN,cAI/F,IAAIgB,EAAeL,EAAc,EACjClO,KAAKqB,WAAarB,KAAKwO,wBAAwBF,EAAsBC,EAAcF,GACnFrO,KAAKkC,SAAWlC,KAAKyO,yBAAyBH,EAAsBC,EAAcF,GAClFrO,KAAK0O,4BAA4BL,IAoBrC/P,EAAU4F,UAAUsK,wBAWpB,SAAUG,EAAeJ,EAAcF,GAEnC,IAAIN,EAAa/N,KAAKwN,iBAWtB,OAAOW,KAAKC,IAAID,KAAKS,IAAI,EATOb,EAAaY,EAQWJ,EANjCR,EAAa,GAOgBM,IAOxD/P,EAAU4F,UAAU2K,cAIpB,WAGI,OAAO7O,KAAK8O,eAAiB,KAAO9O,KAAK2C,WAAa3C,KAAK+O,aAO/DzQ,EAAU4F,UAAU8K,mBAIpB,WACI,OAAIhP,KAAK8O,eACE9O,KAAK8O,eAIX9O,KAAKa,kBAAqBb,KAAKa,iBAAiBoO,sBACjDjP,KAAK6O,iBAGF7O,KAAKa,iBAAiBqO,UAFlB,MASf5Q,EAAU4F,UAAUiL,yBAIpB,WACI,OAAInP,KAAKqF,WAAarF,KAAKqH,aAAerH,KAAKqH,YAAYgC,WAChDrJ,KAAKqH,YAAYgC,WAAWrF,GAEhC,MAkBX1F,EAAU4F,UAAUkG,yBASpB,WAEI,IASI5E,EATA4J,EAAcpP,KAAKuF,WAAWkC,WAAWC,eAAeR,wBAExDmI,EAAerP,KAAKQ,eAAe8O,kBAEnCC,EAAQvP,KAAK4H,SAEb4H,EAAexP,KAAKmF,SAAW1F,EA35Cd,GA45CjBkL,GAIJ,GAAI3K,KAAKmF,SACLK,EAAU/F,MAET,CAED,IAAIyI,EAAWlI,KAAK0E,gBAAgBwD,SAAS,IAAMlI,KAAK8C,QAAQ2M,MAChEjK,EAAU0C,GAAYA,EAASwH,MAj6CP/E,GALP,GAy6ChB4E,IACD/J,IAAY,GAIhB,IAAImK,EAAe,GAAKP,EAAYQ,KAAOpK,GAAW+J,EAAQC,EAAe,IAEzEK,EAAgBT,EAAYU,MAAQtK,EAAU6J,EAAaU,OACxDR,EAAQ,EAAIC,GAEfG,EAAe,EACfnK,GAAWmK,EAx5Ca,EA05CnBE,EAAgB,IACrBrK,GAAWqK,EA35Ca,GAg6C5B7P,KAAKuF,WAAWC,QAAU2I,KAAK6B,MAAMxK,GACrCxF,KAAKuF,WAAWkC,WAAWwI,kBAiB/B3R,EAAU4F,UAAUuK,yBAUpB,SAAUE,EAAeJ,EAAcF,GAEnC,IAMI6B,EANAnC,EAAa/N,KAAKwN,iBAElB2C,GAA0BpC,EAAa/N,KAAK+G,aAAaqJ,QAAU,EAEnEC,EAAsBlC,KAAKmC,MAn+CT,IAm+CyCvC,GAI/D,OAAI/N,KAAKwC,wBACE,GAGP0N,EADoB,IAApBlQ,KAAKqB,WACsBsN,EAAgBZ,EAEtC/N,KAAKqB,aAAegN,GAIEM,GAFD3O,KAAKiO,gBAAkBoC,IAWCtC,GAL1BA,GAAc/N,KAAKiO,gBAAkBF,EAr/C3C,KAq/CmFA,GAW1EQ,EAAeR,EAAa,EAKpDI,KAAK6B,OAAkC,EAA5BE,EAAgCC,KAiBtD7R,EAAU4F,UAAUwK,4BASpB,SAAUL,GAEN,IAAIN,EAAa/N,KAAKwN,iBAElB6B,EAAerP,KAAKQ,eAAe8O,kBAEnCiB,EAAoBvQ,KAAK+G,aAAayJ,IApgDd,EAsgDxBC,EAAuBpB,EAAae,OAASpQ,KAAK+G,aAAa2J,OAtgDvC,EAwgDxBC,EAAiBxC,KAAKyC,IAAI5Q,KAAKkC,UAI/B2O,EAFmB1C,KAAKC,IAAIpO,KAAKiO,gBAAkBF,EA3iDjC,KA6iDqB4C,EAAiB3Q,KAAK+G,aAAaqJ,OAC1ES,EAAoBJ,EACpBzQ,KAAK8Q,eAAeD,EAAmBJ,GAElCE,EAAiBJ,EACtBvQ,KAAK+Q,iBAAiBJ,EAAgBJ,EAAmBlC,GAGzDrO,KAAKgC,iBAAmBhC,KAAKgR,2BAWrC1S,EAAU4F,UAAU4M,eAOpB,SAAUD,EAAmBJ,GAGzB,IAAIQ,EAAwB9C,KAAK6B,MAAMa,EAAoBJ,GAG3DzQ,KAAKqB,YAAc4P,EACnBjR,KAAKkC,UAAY+O,EACjBjR,KAAKgC,iBAAmBhC,KAAKgR,0BAIzBhR,KAAKqB,YAAc,IACnBrB,KAAKqB,WAAa,EAClBrB,KAAKkC,SAAW,EAChBlC,KAAKgC,iBAAmB,mBAYhC1D,EAAU4F,UAAU6M,iBAQpB,SAAUJ,EAAgBJ,EAAmBlC,GAGzC,IAAI6C,EAAwB/C,KAAK6B,MAAMW,EAAiBJ,GASxD,GANAvQ,KAAKqB,YAAc6P,EACnBlR,KAAKkC,UAAYgP,EACjBlR,KAAKgC,iBAAmBhC,KAAKgR,0BAIzBhR,KAAKqB,YAAcgN,EAInB,OAHArO,KAAKqB,WAAagN,EAClBrO,KAAKkC,SAAW,OAChBlC,KAAKgC,iBAAmB,gBAUhC1D,EAAU4F,UAAU8M,wBAKpB,WAEI,IAAIjD,EAAa/N,KAAKwN,iBAElB2C,GAA0BpC,EAAa/N,KAAK+G,aAAaqJ,QAAU,EAGvE,MAAO,QADOjC,KAAKyC,IAAI5Q,KAAKkC,UAAYiO,EAAyBpC,EAAa,GACpD,UAQ9BzP,EAAU4F,UAAU+J,cAKpB,WACI,OAAOjO,KAAK8C,QAAQgE,OAAS9G,KAAKuN,aAAazG,QAQnDxI,EAAU4F,UAAUsJ,eAKpB,WACI,OA5pDoB,EA4pDbxN,KAAK4B,kBAYhBtD,EAAU4F,UAAUiN,kBAMpB,SAAUC,GACNpR,KAAKqR,iBAAmBD,EAAI7I,KAAK,MAWrCjK,EAAU4F,UAAUoN,iBAKpB,WACItR,KAAKiM,QACLjM,KAAK6G,QAEThE,OAAOoB,eAAe3F,EAAU4F,UAAW,mBAAoB,CAK3DC,IAKA,WACI,OAAOnE,KAAKmB,aAAenB,KAAKmI,OAEpC9D,YAAY,EACZC,cAAc,IAkFXhG,EA3sDmB,CAdJuE,OAAAhE,EAAA,EAAAgE,CAAmBA,OAAAhE,EAAA,EAAAgE,CAAcA,OAAAhE,EAAA,EAAAgE,CAAcA,OAAAhE,EAAA,EAAAgE,CAAgB5C,OAguDrF9B,EAAiC,WAgBjC,OAfA,aADgC,sCCt8DpCH,EAAAC,EAAAC,EAAA,sBAAAqT,IAAAvT,EAAAC,EAAAC,EAAA,sBAAAsT,IAAAxT,EAAAC,EAAAC,EAAA,sBAAAuT,IAAAzT,EAAAC,EAAAC,EAAA,sBAAAwT,IAAA1T,EAAAC,EAAAC,EAAA,sBAAAyT,IAAA3T,EAAAC,EAAAC,EAAA,sBAAA0T,IAAA5T,EAAAC,EAAAC,EAAA,sBAAA2T,IAAA7T,EAAAC,EAAAC,EAAA,sBAAA4T,IAAA9T,EAAAC,EAAAC,EAAA,sBAAA6T,IAAA/T,EAAAC,EAAAC,EAAA,sBAAA8T,IAAAhU,EAAAC,EAAAC,EAAA,sBAAA+T,IAAAjU,EAAAC,EAAAC,EAAA,sBAAAgU,IAAAlU,EAAAC,EAAAC,EAAA,sBAAAiU,IAAA,IAAAC,EAAApU,EAAA,QAAAqU,EAAArU,EAAA,QAAAsU,EAAAtU,EAAA,QAAAS,EAAAT,EAAA,QAAAuU,EAAAvU,EAAA,QAAAwU,EAAAxU,EAAA,QAAAyU,EAAAzU,EAAA,QAAA0U,EAAA1U,EAAA,QAAA2U,EAAA3U,EAAA,QAAAc,EAAAd,EAAA,QAAA4U,EAAA5U,EAAA,QAwBI6T,EAA0B,SAAUtR,GAEpC,SAASsR,IACL,IAAI5Q,EAAmB,OAAXV,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAKhE,OADAiB,EAAM6R,eAAiB,mBAChB7R,EAcX,OArBA4B,OAAAuP,EAAA,UAAAvP,CAAUgP,EAAUtR,GAqBbsR,EAtBkB,CAuB3BQ,EAAA,GAUEb,EAA4B,SAAUjR,GAEtC,SAASiR,IACL,OAAkB,OAAXjR,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAQ/D,OAVA6C,OAAAuP,EAAA,UAAAvP,CAAU2O,EAAYjR,GAUfiR,EAXoB,CAY7Ba,EAAA,GAKEZ,EAAkC,SAAUlR,GAE5C,SAASkR,IACL,OAAkB,OAAXlR,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAQ/D,OAVA6C,OAAAuP,EAAA,UAAAvP,CAAU4O,EAAkBlR,GAUrBkR,EAX0B,CAYnCY,EAAA,GAsBEX,EAA8B,SAAUnR,GAExC,SAASmR,IACL,OAAkB,OAAXnR,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAgB/D,OAlBA6C,OAAAuP,EAAA,UAAAvP,CAAU6O,EAAcnR,GAkBjBmR,EAnBsB,CAoB/BW,EAAA,GAIEV,EAA+B,SAAUpR,GAEzC,SAASoR,EAAcoB,EAAWpS,GAC9B,IAAIM,EAAQV,EAAOW,KAAKlB,KAAM+S,EAAWpS,IAAeX,KAExD,OADAW,EAAWsG,cAAc+L,UAAUC,IAAI,cAAgBF,EAAUG,sBAC1DjS,EAgBX,OApBA4B,OAAAuP,EAAA,UAAAvP,CAAU8O,EAAepR,GAoBlBoR,EArBuB,CAsBhCU,EAAA,GA8BET,EAAyB,SAAUrR,GAEnC,SAASqR,EAAQmB,EAAWpS,GACxB,IAAIM,EAAQV,EAAOW,KAAKlB,KAAM+S,EAAWpS,IAAeX,KAExD,OADAW,EAAWsG,cAAc+L,UAAUC,IAAI,cAAgBF,EAAUG,sBAC1DjS,EAgBX,OApBA4B,OAAAuP,EAAA,UAAAvP,CAAU+O,EAASrR,GAoBZqR,EArBiB,CAsB1BS,EAAA,GAUEP,EAAiC,SAAUvR,GAE3C,SAASuR,IACL,OAAkB,OAAXvR,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAS/D,OAXA6C,OAAAuP,EAAA,UAAAvP,CAAUiP,EAAiBvR,GAWpBuR,EAZyB,CAalCO,EAAA,GAyBEN,EAA2B,SAAUxR,GAErC,SAASwR,IACL,OAAkB,OAAXxR,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAS/D,OAXA6C,OAAAuP,EAAA,UAAAvP,CAAUkP,EAAWxR,GAWdwR,EAZmB,CAa5BM,EAAA,GAIEL,EAA8B,SAAUzR,GAExC,SAASyR,IACL,OAAkB,OAAXzR,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAe/D,OAjBA6C,OAAAuP,EAAA,UAAAvP,CAAUmP,EAAczR,GAiBjByR,EAlBsB,CAmB/BK,EAAA,GAIEJ,EAA8B,SAAU1R,GAExC,SAAS0R,IACL,OAAkB,OAAX1R,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAe/D,OAjBA6C,OAAAuP,EAAA,UAAAvP,CAAUoP,EAAc1R,GAiBjB0R,EAlBsB,CAmB/BI,EAAA,GAIEH,EAAwB,SAAU3R,GAElC,SAAS2R,IACL,OAAkB,OAAX3R,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAe/D,OAjBA6C,OAAAuP,EAAA,UAAAvP,CAAUqP,EAAQ3R,GAiBX2R,EAlBgB,CAmBzBG,EAAA,GA2BEd,EAAgC,WAUhC,OATA,aAD+B,GAsB/B4B,EAAmB,iBAmBvBhB,EAAoC,SAAU5R,GAE1C,SAAS4R,EAAmBiB,QACJ,IAAhBA,IAA0BA,EAAc,IAC5C,IAAInS,EAAQV,EAAOW,KAAKlB,OAASA,KAkHjC,OA9GAiB,EAAMoS,YAAc,IAAId,EAAA,EAAgB,IAIxCtR,EAAMqS,QAAU,IAAIf,EAAA,EAAgB,IAIpCtR,EAAMsS,qBAAuB,IAAIf,EAAA,EAKjCvR,EAAMuS,2BAA6Bf,EAAA,EAAagB,MAUhDxS,EAAMyS,oBAAsB,SAAUC,EAAMC,GAExC,IAAI7T,EAAQ,EAA4B6T,GACxC,GAAI/Q,OAAApE,EAAA,EAAAoE,CAAe9C,GAAQ,CAEvB,IAAI8T,EAAcC,OAAO/T,GAGzB,OAAO8T,EAAcV,EAAmBU,EAAc9T,EAE1D,OAAOA,GAWXkB,EAAM8S,SAAW,SAAUJ,EAAM7G,GAE7B,IAAIkH,EAASlH,EAAKkH,OAEdC,EAAYnH,EAAKmH,UACrB,OAAKD,GAAuB,IAAbC,EAGRN,EAAK7G,KAAK,SAAUC,EAAGC,GAE1B,IAAIkH,EAASjT,EAAMyS,oBAAoB3G,EAAGiH,GAEtCG,EAASlT,EAAMyS,oBAAoB1G,EAAGgH,GAMtCI,EAAmB,EAgBvB,OAfc,MAAVF,GAA4B,MAAVC,EAEdD,EAASC,EACTC,EAAmB,EAEdF,EAASC,IACdC,GAAoB,GAGT,MAAVF,EACLE,EAAmB,EAEJ,MAAVD,IACLC,GAAoB,GAEjBA,GAAiC,OAAbH,EAAqB,GAAK,KA5B9CN,GAyCf1S,EAAMoT,gBAAkB,SAAUV,EAAMW,GAGpC,IAAIC,EAAU1R,OAAO2R,KAAKb,GAAMjG,OAAO,SAAU+G,EAAaC,GAO1D,OAAOD,EAAc,EAA4BC,GAAO,UACzD,IAAIC,cAGHC,EAAoBN,EAAOO,OAAOF,cACtC,OAA8C,GAAvCJ,EAAQrH,QAAQ0H,IAE3B3T,EAAM6T,MAAQ,IAAIvC,EAAA,EAAgBa,GAClCnS,EAAM8T,4BACC9T,EAkTX,OAvaA4B,OAAAuP,EAAA,UAAAvP,CAAUsP,EAAoB5R,GAuH9BsC,OAAOoB,eAAekO,EAAmBjO,UAAW,OAAQ,CAExDC,IAIA,WAAc,OAAOnE,KAAK8U,MAAM/U,OAChCqE,IAIA,SAAUuP,GAAQ3T,KAAK8U,MAAMrQ,KAAKkP,IAClCtP,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAekO,EAAmBjO,UAAW,SAAU,CAK1DC,IAKA,WAAc,OAAOnE,KAAKsT,QAAQvT,OAClCqE,IAIA,SAAUkQ,GAAUtU,KAAKsT,QAAQ7O,KAAK6P,IACtCjQ,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAekO,EAAmBjO,UAAW,OAAQ,CAKxDC,IAKA,WAAc,OAAOnE,KAAKgV,OAC1B5Q,IAIA,SAAU0I,GACN9M,KAAKgV,MAAQlI,EACb9M,KAAK+U,6BAET1Q,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAekO,EAAmBjO,UAAW,YAAa,CAW7DC,IAWA,WAAc,OAAOnE,KAAKiV,YAC1B7Q,IAIA,SAAU8Q,GACNlV,KAAKiV,WAAaC,EAClBlV,KAAK+U,6BAET1Q,YAAY,EACZC,cAAc,IAalB6N,EAAmBjO,UAAU6Q,0BAM7B,WACI,IAAI9T,EAAQjB,KAQRmV,EAAanV,KAAKgV,MAClBnS,OAAA6P,EAAA,EAAA7P,CAAM7C,KAAKgV,MAAMG,WAAYnV,KAAKgV,MAAMI,aACxCvS,OAAA8P,EAAA,EAAA9P,CAAG,MAEHwS,EAAarV,KAAKiV,WAClBpS,OAAA6P,EAAA,EAAA7P,CAAM7C,KAAKiV,WAAWK,KAAMtV,KAAKuT,qBAAsBvT,KAAKiV,WAAWG,aACvEvS,OAAA8P,EAAA,EAAA9P,CAAG,MAEH0S,EAAavV,KAAK8U,MAGlBU,EAAe3S,OAAA/D,EAAA,EAAA+D,CAAc0S,EAAYvV,KAAKsT,SAC7CjQ,KAAKR,OAAA+P,EAAA,EAAA/P,CAAI,SAAU4S,GAEpB,OAAOxU,EAAMyU,YADFD,EAAG,OAKdE,EAAc9S,OAAA/D,EAAA,EAAA+D,CAAc2S,EAAcL,GACzC9R,KAAKR,OAAA+P,EAAA,EAAA/P,CAAI,SAAU4S,GAEpB,OAAOxU,EAAM2U,WADFH,EAAG,OAKdI,EAAgBhT,OAAA/D,EAAA,EAAA+D,CAAc8S,EAAaN,GAC1ChS,KAAKR,OAAA+P,EAAA,EAAA/P,CAAI,SAAU4S,GAEpB,OAAOxU,EAAM6U,UADFL,EAAG,OAIlBzV,KAAKwT,2BAA2BuC,cAChC/V,KAAKwT,2BAA6BqC,EAAczQ,UAAU,SAAUuO,GAAQ,OAAO1S,EAAMoS,YAAY5O,KAAKkP,MAc9GxB,EAAmBjO,UAAUwR,YAO7B,SAAU/B,GACN,IAAI1S,EAAQjB,KASZ,OALAA,KAAKwV,aACAxV,KAAKsU,OAAgBX,EAAKW,OAAO,SAAU0B,GAAO,OAAO/U,EAAMoT,gBAAgB2B,EAAK/U,EAAMqT,UAA5EX,EACf3T,KAAKkV,WACLlV,KAAKiW,iBAAiBjW,KAAKwV,aAAa1O,QAErC9G,KAAKwV,cAchBrD,EAAmBjO,UAAU0R,WAO7B,SAAUjC,GAEN,OAAK3T,KAAK8M,KAGH9M,KAAK+T,SAASJ,EAAKuC,QAASlW,KAAK8M,MAF7B6G,GAcfxB,EAAmBjO,UAAU4R,UAM7B,SAAUnC,GACN,IAAK3T,KAAKkV,UACN,OAAOvB,EAGX,IAAIwC,EAAanW,KAAKkV,UAAUkB,UAAYpW,KAAKkV,UAAUmB,SAC3D,OAAO1C,EAAKuC,QAAQI,OAAOH,EAAYnW,KAAKkV,UAAUmB,WAc1DlE,EAAmBjO,UAAU+R,iBAO7B,SAAUM,GACN,IAAItV,EAAQjB,KACZ8K,QAAQC,UAAUC,KAAK,WAEnB,IAAIkK,EAAYjU,EAAMiU,UACtB,GAAKA,IAGLA,EAAUpO,OAASyP,EAEfrB,EAAUkB,UAAY,GAAG,CAEzB,IAAII,EAAgBrI,KAAKsI,KAAKvB,EAAUpO,OAASoO,EAAUmB,UAAY,GAAK,EAExEK,EAAevI,KAAKC,IAAI8G,EAAUkB,UAAWI,GAC7CE,IAAiBxB,EAAUkB,YAC3BlB,EAAUkB,UAAYM,EAGtBzV,EAAMsS,qBAAqB9O,YAc3C0N,EAAmBjO,UAAUyS,QAK7B,WAAc,OAAO3W,KAAKqT,aAU1BlB,EAAmBjO,UAAU0S,WAK7B,aACOzE,EAxawB,CAyajCG,EAAA,sCC7zBFtU,EAAAC,EAAAC,EAAA,sBAAA2Y,IAAA7Y,EAAAC,EAAAC,EAAA,sBAAA4Y,IAAA9Y,EAAAC,EAAAC,EAAA,sBAAA6Y,IAAA/Y,EAAAC,EAAAC,EAAA,sBAAA8Y,IAAAhZ,EAAAC,EAAAC,EAAA,sBAAA+Y,IAAAjZ,EAAAC,EAAAC,EAAA,sBAAAgZ,IAAAlZ,EAAAC,EAAAC,EAAA,sBAAAiZ,IAAAnZ,EAAAC,EAAAC,EAAA,sBAAAkZ,IAAApZ,EAAAC,EAAAC,EAAA,sBAAAmZ,IAAArZ,EAAAC,EAAAC,EAAA,sBAAAoZ,IAAAtZ,EAAAC,EAAAC,EAAA,sBAAAqZ,IAAAvZ,EAAAC,EAAAC,EAAA,sBAAAsZ,IAAAxZ,EAAAC,EAAAC,EAAA,sBAAAuZ,IAAAzZ,EAAAC,EAAAC,EAAA,sBAAAwZ,IAAA1Z,EAAAC,EAAAC,EAAA,sBAAAyZ,IAAA3Z,EAAAC,EAAAC,EAAA,sBAAA0Z,IAAA5Z,EAAAC,EAAAC,EAAA,sBAAA2Z,IAAA7Z,EAAAC,EAAAC,EAAA,sBAAA4Z,IAAA9Z,EAAAC,EAAAC,EAAA,sBAAA6Z,IAAA,IAAA3F,EAAApU,EAAA,QAAAga,EAAAha,EAAA,QAAAia,EAAAja,EAAA,QAAAka,EAAAla,EAAA,QAAAuU,EAAAvU,EAAA,QAAAwU,EAAAxU,EAAA,QAAAyU,EAAAzU,EAAA,QAAA0U,EAAA1U,EAAA,QAAAma,EAAAna,EAAA,QA+BA,SAASoa,EAAoBC,GACzB,OAAsB,SAAU9X,GAE5B,SAAS+X,IAEL,IADA,IAAIC,EAAO,GACFC,EAAK,EAAGA,EAAK3F,UAAU/L,OAAQ0R,IACpCD,EAAKC,GAAM3F,UAAU2F,GAEzB,IAAIvX,EAAQV,EAAOwC,MAAM/C,KAAMuY,IAASvY,KAMxC,OALAiB,EAAMwX,SAAU,EAIhBxX,EAAMyX,mBAAoB,EACnBzX,EAiDX,OA7DA4B,OAAAuP,EAAA,UAAAvP,CAAUyV,EAAS/X,GAcnBsC,OAAOoB,eAAeqU,EAAQpU,UAAW,SAAU,CAE/CC,IAIA,WAAc,OAAOnE,KAAKyY,SAC1BrU,IAIA,SAAUuU,GAEN,IAAIC,EAAY5Y,KAAKyY,QACrBzY,KAAKyY,QAAU5V,OAAAmV,EAAA,EAAAnV,CAAsB8V,GACrC3Y,KAAK0Y,kBAAoBE,IAAc5Y,KAAKyY,SAEhDpU,YAAY,EACZC,cAAc,IAOlBgU,EAAQpU,UAAU2U,iBAIlB,WAEI,IAAIA,EAAmB7Y,KAAK0Y,kBAE5B,OADA1Y,KAAK0Y,mBAAoB,EAClBG,GAOXP,EAAQpU,UAAU4U,mBAIlB,WACI9Y,KAAK0Y,mBAAoB,GAEtBJ,EA9DU,CA+DnBD,GAWN,IAAIpB,EAA4B,WAW5B,OAVA,SAAyC8B,GACrC/Y,KAAK+Y,SAAWA,GAFO,GAiB3B7B,EAAkC,WAWlC,OAVA,SAA+C6B,GAC3C/Y,KAAK+Y,SAAWA,GAFa,GAiBjC5B,EAAkC,WAWlC,OAVA,SAA+C4B,GAC3C/Y,KAAK+Y,SAAWA,GAFa,GAiCjC3B,EAA8B,SAAU7W,GAExC,SAAS6W,IACL,IAAInW,EAAmB,OAAXV,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAEhE,OADAiB,EAAM+X,YAAa,EACZ/X,EAoEX,OAxEA4B,OAAAuP,EAAA,UAAAvP,CAAUuU,EAAc7W,GAMxBsC,OAAOoB,eAAemT,EAAalT,UAAW,OAAQ,CAElDC,IAIA,WAAc,OAAOnE,KAAKiZ,OAC1B7U,IAIA,SAAU8U,GAGDA,IAGLlZ,KAAKiZ,MAAQC,EACblZ,KAAKkT,qBAAuBgG,EAAKC,QAAQ,gBAAiB,OAE9D9U,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAemT,EAAalT,UAAW,YAAa,CAMvDC,IAMA,WAAc,OAAOnE,KAAKgZ,YAC1B5U,IAIA,SAAUuU,GAEN,IAAIC,EAAY5Y,KAAKgZ,WACrBhZ,KAAKgZ,WAAanW,OAAAmV,EAAA,EAAAnV,CAAsB8V,GACxC3Y,KAAK0Y,kBAAoBE,IAAc5Y,KAAKgZ,YAEhD3U,YAAY,EACZC,cAAc,IAmBX8S,EAzEsB,CALTgB,EANU,WAG9B,OAFA,aAD6B,KA4FjCgB,EAA6B,WAMzB,OALA,SAAqBrG,EAAWpS,GAG5BA,EAAWsG,cAAc+L,UAAUC,IADb,cAAgBF,EAAUG,uBAH5B,GAWxBmE,EAA+B,SAAU9W,GAEzC,SAAS8W,EAActE,EAAWpS,GAC9B,OAAOJ,EAAOW,KAAKlB,KAAM+S,EAAWpS,IAAeX,KAgBvD,OAlBA6C,OAAAuP,EAAA,UAAAvP,CAAUwU,EAAe9W,GAkBlB8W,EAnBuB,CAoBhC+B,GAIE9B,EAA+B,SAAU/W,GAEzC,SAAS+W,EAAcvE,EAAWpS,GAC9B,OAAOJ,EAAOW,KAAKlB,KAAM+S,EAAWpS,IAAeX,KAgBvD,OAlBA6C,OAAAuP,EAAA,UAAAvP,CAAUyU,EAAe/W,GAkBlB+W,EAnBuB,CAoBhC8B,GAIE7B,EAAyB,SAAUhX,GAEnC,SAASgX,EAAQxE,EAAWpS,GACxB,OAAOJ,EAAOW,KAAKlB,KAAM+S,EAAWpS,IAAeX,KAgBvD,OAlBA6C,OAAAuP,EAAA,UAAAvP,CAAU0U,EAAShX,GAkBZgX,EAnBiB,CAoB1B6B,GAsBFC,EAA4B,WACxB,SAASA,EAAgCN,EAAUO,GAC/CtZ,KAAK+Y,SAAWA,EAChB/Y,KAAKsZ,SAAWA,EA2DpB,OArDAD,EAAWnV,UAAUqC,YAIrB,SAAUJ,GAGN,IAAKnG,KAAKuZ,eAAgB,CAEtB,IAAIC,EAAWrT,EAAiB,SAAKA,EAAiB,QAAEiF,cAAiB,GACzEpL,KAAKuZ,eAAiBvZ,KAAKsZ,SAAS7N,KAAK+N,GAASC,SAClDzZ,KAAKuZ,eAAeG,KAAKF,KAYjCH,EAAWnV,UAAUyV,eAKrB,WACI,OAAO3Z,KAAKuZ,eAAeG,KAAK1Z,KAAKwZ,UAQzCH,EAAWnV,UAAU0V,oBAKrB,SAAUC,GACN,OAAI7Z,gBAAgBwX,EACTqC,EAAOC,WAAWf,SAEzB/Y,gBAAgByX,EACToC,EAAOE,WAAWhB,SAGlBc,EAAOG,KAAKjB,UAGpBM,EA9DgB,GAsFvB7B,EAAiC,SAAUjX,GAE3C,SAASiX,EAAgBuB,EAAUO,GAC/B,OAAO/Y,EAAOW,KAAKlB,KAAM+Y,EAAUO,IAAatZ,KA+BpD,OAjCA6C,OAAAuP,EAAA,UAAAvP,CAAU2U,EAAiBjX,GAY3BiX,EAAgBtT,UAAUqC,YAO1B,SAAUJ,GACN5F,EAAO2D,UAAUqC,YAAYrF,KAAKlB,KAAMmG,IAarCqR,EAlCyB,CALTY,EARU,SAAU7X,GAE3C,SAAS0Z,IACL,OAAkB,OAAX1Z,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAE/D,OAJA6C,OAAAuP,EAAA,UAAAvP,CAAUoX,EAAqB1Z,GAIxB0Z,EALyB,CAMlCZ,KAiEE5B,EAAiC,SAAUlX,GAE3C,SAASkX,EAAgBsB,EAAUO,GAC/B,OAAO/Y,EAAOW,KAAKlB,KAAM+Y,EAAUO,IAAatZ,KA+BpD,OAjCA6C,OAAAuP,EAAA,UAAAvP,CAAU4U,EAAiBlX,GAY3BkX,EAAgBvT,UAAUqC,YAO1B,SAAUJ,GACN5F,EAAO2D,UAAUqC,YAAYrF,KAAKlB,KAAMmG,IAarCsR,EAlCyB,CALTW,EARU,SAAU7X,GAE3C,SAAS2Z,IACL,OAAkB,OAAX3Z,GAAmBA,EAAOwC,MAAM/C,KAAM6S,YAAc7S,KAE/D,OAJA6C,OAAAuP,EAAA,UAAAvP,CAAUqX,EAAqB3Z,GAIxB2Z,EALyB,CAMlCb,KAiDE3B,EAA2B,SAAUnX,GAIrC,SAASmX,EAAUqB,EAAUO,GACzB,OAAO/Y,EAAOW,KAAKlB,KAAM+Y,EAAUO,IAAatZ,KAapD,OAjBA6C,OAAAuP,EAAA,UAAAvP,CAAU6U,EAAWnX,GAiBdmX,EAlBmB,CAmB5B2B,GAKE1B,EAA+B,WAC/B,SAASA,EAAcwC,GACnBna,KAAKma,eAAiBA,EACtBxC,EAAcyC,qBAAuBpa,KA8BzC,OAzBA2X,EAAczT,UAAUuC,YAGxB,WAGQkR,EAAcyC,uBAAyBpa,OACvC2X,EAAcyC,qBAAuB,OAU7CzC,EAAcyC,qBAAuB,KAQ9BzC,EAjCuB,GAsC9BC,EAA8B,WAc9B,OAbA,aAD6B,GAmB7BC,EAA8B,WAc9B,OAbA,aAD6B,GAmB7BC,EAAwB,WAcxB,OAbA,aADuB,GA4B3B,SAASuC,EAA2BrW,GAChC,OAAOW,MAAM,kCAAqCX,EAAK,MAyD3D,IAAIsW,EAAoB,CAAC,MAAO,SAAU,OAAQ,SASlDC,EAA8B,WAU1B,SAASA,EAAaC,EAAmBC,EAAcxG,EAAWyG,QAC3C,IAAfA,IAAyBA,GAAa,GAC1C1a,KAAKwa,kBAAoBA,EACzBxa,KAAKya,aAAeA,EACpBza,KAAKiU,UAAYA,EACjBjU,KAAK0a,WAAaA,EAkatB,OAnZAH,EAAarW,UAAUyW,uBAOvB,SAAUC,EAAMC,GACZ,IAAK,IAAIrC,EAAK,EAAGsC,EAASF,EAAMpC,EAAKsC,EAAOhU,OAAQ0R,IAAM,CACtD,IAAIuC,EAAMD,EAAOtC,GAGjB,GAAIuC,EAAIC,WAAaD,EAAIE,aAAzB,CAGAjb,KAAKkb,mBAAmBH,EAAKF,GAC7B,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAIK,SAAStU,OAAQqU,IAGrCnb,KAAKkb,mBADyBH,EAAIK,SAASD,GACbN,MAuB1CN,EAAarW,UAAUmX,oBAUvB,SAAUT,EAAMU,EAAmBC,GAE/B,IAAIC,EAAmBF,EAAkB9R,KAAK,SAAUiS,GAAS,OAAOA,KAAaF,EAAgB/R,KAAK,SAAUiS,GAAS,OAAOA,IACpI,GAAKb,EAAK9T,QAAW0U,GAAqBxb,KAAK0a,WAe/C,IAXA,IAAIgB,EAAWd,EAAK,GAEhBe,EAAWD,EAASN,SAAStU,OAE7B8U,EAAa5b,KAAK6b,eAAeH,GAEjCI,EAAiB9b,KAAK+b,+BAA+BH,EAAYN,GAEjEU,EAAehc,KAAKic,6BAA6BL,EAAYL,GAE7DhM,EAA2B,QAAnBvP,KAAKiU,UACRuE,EAAK,EAAG0D,EAAStB,EAAMpC,EAAK0D,EAAOpV,OAAQ0R,IAEhD,IADA,IAAIuC,EAAMmB,EAAO1D,GACR2C,EAAI,EAAGA,EAAIQ,EAAUR,IAAK,CAE/B,IAAInB,EAA0Be,EAAIK,SAASD,GACvCG,EAAkBH,IAClBnb,KAAKmc,gBAAgBnC,EAAMzK,EAAQ,QAAU,OAAQuM,EAAeX,IAEpEI,EAAgBJ,IAChBnb,KAAKmc,gBAAgBnC,EAAMzK,EAAQ,OAAS,QAASyM,EAAab,MA4BlFZ,EAAarW,UAAUkY,UAYvB,SAAUC,EAAaC,EAAcC,GAEjC,GAAKvc,KAAK0a,WASV,IAHA,IAAIE,EAAoB,WAAb2B,EAAwBF,EAAY/T,UAAY+T,EAEvDG,EAAe,EACVC,EAAW,EAAGA,EAAW7B,EAAK9T,OAAQ2V,IAC3C,GAAKH,EAAaG,GAAlB,CAIA,IAAI1B,EAAMH,EAAK6B,GACf,GAAIzc,KAAKwa,kBACL,IAAK,IAAIkC,EAAI,EAAGA,EAAI3B,EAAIK,SAAStU,OAAQ4V,IAGrC1c,KAAKmc,gBADyBpB,EAAIK,SAASsB,GAChBH,EAAUC,QAMzCxc,KAAKmc,gBAAgBpB,EAAKwB,EAAUC,GAExC,GAAIC,IAAa7B,EAAK9T,OAAS,EAE3B,OAEJ0V,GAAgBzB,EAAI7T,wBAAwBkJ,SAkBpDmK,EAAarW,UAAUyY,4BASvB,SAAUC,EAAcN,GACpB,GAAKtc,KAAKwa,kBAAV,CAIA,IAAIqC,EAA2BD,EAAalS,cAAc,SACtD4R,EAAa9S,KAAK,SAAUiS,GAAS,OAAQA,IAC7Czb,KAAKkb,mBAAmB2B,EAAO,CAAC,WAGhC7c,KAAKmc,gBAAgBU,EAAO,SAAU,KAgB9CtC,EAAarW,UAAUgX,mBAQvB,SAAU4B,EAASjC,GACf,IAAK,IAAIrC,EAAK,EAAGuE,EAAqBlC,EAAkBrC,EAAKuE,EAAmBjW,OAAQ0R,IAEpFsE,EAAQnV,MADEoV,EAAmBvE,IACR,GAEzBsE,EAAQnV,MAAMqV,OAAShd,KAAKid,qBAAqBH,GAI9BxC,EAAkB9Q,KAAK,SAAU0T,GAAO,QAASJ,EAAQnV,MAAMuV,OAE9EJ,EAAQnV,MAAM4U,SAAW,GACzBO,EAAQ9J,UAAUmK,OAAOnd,KAAKya,gBAiBtCF,EAAarW,UAAUiY,gBASvB,SAAUW,EAASI,EAAKE,GACpBN,EAAQ9J,UAAUC,IAAIjT,KAAKya,cAC3BqC,EAAQnV,MAAMuV,GAAOE,EAAW,KAChCN,EAAQnV,MAAM0V,SAAW,+CACzBP,EAAQnV,MAAMqV,OAAShd,KAAKid,qBAAqBH,IA0BrDvC,EAAarW,UAAU+Y,qBAavB,SAAUH,GAUN,IARA,IAAIQ,EAAmB,CACnB9M,IAAK,IACLE,OAAQ,GACRd,KAAM,EACNE,MAAO,GAGPkN,EAAS,EACJxE,EAAK,EAAG+E,EAAsBjD,EAAmB9B,EAAK+E,EAAoBzW,OAAQ0R,IAAM,CAC7F,IAAI0E,EAAMK,EAAoB/E,GAC1BsE,EAAQnV,MAAMuV,KACdF,GAAUM,EAAiBJ,IAGnC,OAAOF,EAAS,GAAKA,EAAS,IAQlCzC,EAAarW,UAAU2X,eAKvB,SAAUd,GAKN,IAHA,IAAIa,EAAa,GAEb4B,EAAgBzC,EAAIK,SACfD,EAAI,EAAGA,EAAIqC,EAAc1W,OAAQqU,IAGtCS,EAAW6B,KADmBD,EAAcrC,GACvBjU,wBAAwB6I,OAEjD,OAAO6L,GAeXrB,EAAarW,UAAU6X,+BAQvB,SAAU2B,EAAQpB,GAKd,IAHA,IAAIqB,EAAY,GAEZC,EAAe,EACVzC,EAAI,EAAGA,EAAIuC,EAAO5W,OAAQqU,IAC3BmB,EAAanB,KACbwC,EAAUxC,GAAKyC,EACfA,GAAgBF,EAAOvC,IAG/B,OAAOwC,GAeXpD,EAAarW,UAAU+X,6BAQvB,SAAUyB,EAAQpB,GAKd,IAHA,IAAIqB,EAAY,GAEZC,EAAe,EACVzC,EAAIuC,EAAO5W,OAAQqU,EAAI,EAAGA,IAC3BmB,EAAanB,KACbwC,EAAUxC,GAAKyC,EACfA,GAAgBF,EAAOvC,IAG/B,OAAOwC,GAEJpD,EAjbkB,GA4bzB1D,EAA+B,WAa/B,OAZA,SAAuBgH,EAAeld,GAClCX,KAAK6d,cAAgBA,EACrB7d,KAAKW,WAAaA,GAHQ,GAmB9BmW,EAAiC,WAajC,OAZA,SAAyB+G,EAAeld,GACpCX,KAAK6d,cAAgBA,EACrB7d,KAAKW,WAAaA,GAHU,GAmBhCoW,EAAiC,WAajC,OAZA,SAAyB8G,EAAeld,GACpCX,KAAK6d,cAAgBA,EACrB7d,KAAKW,WAAaA,GAHU,GAmDhCqW,EAA0B,WAC1B,SAASA,EAASsC,EAAU7Y,EAAoBP,EAAa4d,EAAMld,EAMnEmd,EAAWC,GACPhe,KAAKsZ,SAAWA,EAChBtZ,KAAKS,mBAAqBA,EAC1BT,KAAKE,YAAcA,EACnBF,KAAKY,KAAOA,EACZZ,KAAKge,UAAYA,EAIjBhe,KAAKie,WAAa,IAAI1L,EAAA,EAMtBvS,KAAKke,kBAAoB,IAAIC,IAM7Bne,KAAKoe,kBAAoB,IAAIC,IAM7Bre,KAAKse,eAAiB,IAAID,IAM1Bre,KAAKue,qBAAuB,IAAIF,IAMhCre,KAAKwe,qBAAuB,IAAIH,IAKhCre,KAAKye,sBAAuB,EAK5Bze,KAAK0e,sBAAuB,EAc5B1e,KAAK2e,qBAAuB,IAAIR,IAKhCne,KAAK8S,eAAiB,mBACtB9S,KAAK4e,wBAAyB,EAO9B5e,KAAK6e,WAAa,IAAIrM,EAAA,EAAgB,CAAEsM,MAAO,EAAGC,IAAKjL,OAAOkL,YACzDlB,GACD9d,KAAKE,YAAY+G,cAAcgY,aAAa,OAAQ,QAExDjf,KAAK+d,UAAYA,EACjB/d,KAAKkf,mBAAiE,UAA5Clf,KAAKE,YAAY+G,cAAckY,SAmuC7D,OAjuCAtc,OAAOoB,eAAe+S,EAAS9S,UAAW,UAAW,CAOjDC,IAOA,WAAc,OAAOnE,KAAKof,YAC1Bhb,IAIA,SAAUQ,GACF/B,OAAAoV,EAAA,GAAApV,IACM,MAAN+B,GAA4B,mBAAPA,GACrB,SAAmD+G,QAAa,MAChEA,QAAQC,KAAK,4CAA8CyT,KAAKC,UAAU1a,GAAM,KAEpF5E,KAAKof,WAAaxa,GAEtBP,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe+S,EAAS9S,UAAW,aAAc,CAqBpDC,IAqBA,WAAc,OAAOnE,KAAKuf,aAC1Bnb,IAIA,SAAUob,GACFxf,KAAKuf,cAAgBC,GACrBxf,KAAKyf,kBAAkBD,IAG/Bnb,YAAY,EACZC,cAAc,IAElBzB,OAAOoB,eAAe+S,EAAS9S,UAAW,wBAAyB,CAO/DC,IAOA,WAAc,OAAOnE,KAAK4e,wBAC1Bxa,IAIA,SAAUuU,GACN3Y,KAAK4e,uBAAyB/b,OAAAmV,EAAA,EAAAnV,CAAsB8V,GAChD3Y,KAAK0f,WAAW7B,cAAc/W,QAC9B9G,KAAK2f,wBAGbtb,YAAY,EACZC,cAAc,IAKlB0S,EAAS9S,UAAUgB,SAGnB,WACI,IAAIjE,EAAQjB,KACZA,KAAK4f,qBACD5f,KAAKkf,oBACLlf,KAAK6f,4BAKT7f,KAAK8f,YAAc9f,KAAKsZ,SAAS7N,KAAK,IAAIgO,OAAO,SAAUjB,EAAIuH,GAC3D,OAAO9e,EAAM+e,QAAU/e,EAAM+e,QAAQD,EAAQE,UAAWF,EAAQpM,MAAQoM,KAMhF/I,EAAS9S,UAAUgc,sBAGnB,WAKI,GAHAlgB,KAAKmgB,gBACLngB,KAAKogB,oBAEApgB,KAAKqgB,eAAevZ,SAAW9G,KAAKsgB,eAAexZ,SAAW9G,KAAKugB,SAASzZ,OAC7E,MA9xBDnC,MAAM,uGAiyBT3E,KAAKwgB,wBAEDxgB,KAAKye,uBACLze,KAAKygB,yBACLzgB,KAAKye,sBAAuB,GAG5Bze,KAAK0e,uBACL1e,KAAK0gB,yBACL1gB,KAAK0e,sBAAuB,GAI5B1e,KAAKwf,YAAcxf,KAAKugB,SAASzZ,OAAS,IAAM9G,KAAK2gB,2BACrD3gB,KAAK4gB,wBAET5gB,KAAK6gB,sBAKT7J,EAAS9S,UAAUuC,YAGnB,WACIzG,KAAK0f,WAAW7B,cAAc1S,QAC9BnL,KAAK8gB,iBAAiBjD,cAAc1S,QACpCnL,KAAK+gB,iBAAiBlD,cAAc1S,QACpCnL,KAAK2e,qBAAqBxT,QAC1BnL,KAAKie,WAAWxZ,OAChBzE,KAAKie,WAAWvX,WACZ7D,OAAAqV,EAAA,EAAArV,CAAa7C,KAAKwf,aAClBxf,KAAKwf,WAAW5I,WAAW5W,OAwBnCgX,EAAS9S,UAAU8c,WAWnB,WACI,IAAI/f,EAAQjB,KACZA,KAAKihB,YAAcjhB,KAAKkhB,oBAExB,IAAI/a,EAAUnG,KAAK8f,YAAYpG,KAAK1Z,KAAKihB,aACzC,GAAK9a,EAAL,CAIA,IAAI0X,EAAgB7d,KAAK0f,WAAW7B,cACpC1X,EAAQgb,iBAAiB,SAAUC,EAAQC,EAAWC,GAClD,GAA4B,MAAxBF,EAAOG,cACPtgB,EAAMugB,WAAWJ,EAAOK,KAAM,QAE7B,GAAoB,MAAhBH,EACLzD,EAAcV,OAAO,OAEpB,CAED,IAAIuE,EAA0B7D,EAAc1Z,IAAI,GAChD0Z,EAAc8D,KAAK,EAA2BL,MAItDthB,KAAK4hB,yBAGLzb,EAAQ0b,sBAAsB,SAAUT,GAEHvD,EAAc1Z,IAAuBid,EAAoB,cAClFU,QAAQC,UAAYX,EAAOK,KAAK9N,OAE5C3T,KAAKgiB,6BAoBThL,EAAS9S,UAAU+d,gBAUnB,SAAUC,GACNliB,KAAKue,qBAAuB,IAAIF,IAAI,CAAC6D,IACrCliB,KAAKye,sBAAuB,GAoBhCzH,EAAS9S,UAAUie,gBAUnB,SAAUC,GACNpiB,KAAKwe,qBAAuB,IAAIH,IAAI,CAAC+D,IACrCpiB,KAAK0e,sBAAuB,GAQhC1H,EAAS9S,UAAUme,aAKnB,SAAUtP,GACN/S,KAAKoe,kBAAkBnL,IAAIF,IAQ/BiE,EAAS9S,UAAUoe,gBAKnB,SAAUvP,GACN/S,KAAKoe,kBAAkBmE,OAAOxP,IAQlCiE,EAAS9S,UAAUse,UAKnB,SAAUC,GACNziB,KAAKse,eAAerL,IAAIwP,IAQ5BzL,EAAS9S,UAAUwe,aAKnB,SAAUD,GACNziB,KAAKse,eAAeiE,OAAOE,IAQ/BzL,EAAS9S,UAAUye,gBAKnB,SAAUT,GACNliB,KAAKue,qBAAqBtL,IAAIiP,GAC9BliB,KAAKye,sBAAuB,GAQhCzH,EAAS9S,UAAU0e,mBAKnB,SAAUV,GACNliB,KAAKue,qBAAqBgE,OAAOL,GACjCliB,KAAKye,sBAAuB,GAQhCzH,EAAS9S,UAAU2e,gBAKnB,SAAUT,GACNpiB,KAAKwe,qBAAqBvL,IAAImP,GAC9BpiB,KAAK0e,sBAAuB,GAQhC1H,EAAS9S,UAAU4e,mBAKnB,SAAUV,GACNpiB,KAAKwe,qBAAqB+D,OAAOH,GACjCpiB,KAAK0e,sBAAuB,GAiBhC1H,EAAS9S,UAAU6e,4BAQnB,WAEI,IAAIC,EAAahjB,KAAKijB,iBAAiBjjB,KAAK8gB,kBAC5C9gB,KAAKkjB,cAAcvI,uBAAuBqI,EAAY,CAAC,QAEvD,IAAI1G,EAAetc,KAAKqgB,eAAerd,IAAI,SAAUmgB,GAAO,OAAOA,EAAIC,SACvEpjB,KAAKkjB,cAAc9G,UAAU4G,EAAY1G,EAAc,OAEvDtc,KAAKqgB,eAAeta,QAAQ,SAAUod,GAAO,OAAOA,EAAIrK,wBAiB5D9B,EAAS9S,UAAUmf,4BAQnB,WAEI,IAAIC,EAAatjB,KAAKijB,iBAAiBjjB,KAAK+gB,kBAC5C/gB,KAAKkjB,cAAcvI,uBAAuB2I,EAAY,CAAC,WAEvD,IAAIhH,EAAetc,KAAKsgB,eAAetd,IAAI,SAAUmgB,GAAO,OAAOA,EAAIC,SACvEpjB,KAAKkjB,cAAc9G,UAAUkH,EAAYhH,EAAc,UACvDtc,KAAKkjB,cAAcvG,4BAA4B3c,KAAKE,YAAY+G,cAAeqV,GAE/Etc,KAAKsgB,eAAeva,QAAQ,SAAUod,GAAO,OAAOA,EAAIrK,wBAiB5D9B,EAAS9S,UAAU8d,yBAQnB,WACI,IAAI/gB,EAAQjB,KAERgjB,EAAahjB,KAAKijB,iBAAiBjjB,KAAK8gB,kBAExCyC,EAAWvjB,KAAKijB,iBAAiBjjB,KAAK0f,YAEtC4D,EAAatjB,KAAKijB,iBAAiBjjB,KAAK+gB,kBAG5C/gB,KAAKkjB,cAAcvI,uBAAuBqI,EAAWQ,OAAOD,EAAUD,GAAa,CAAC,OAAQ,UAE5FN,EAAWjd,QAAQ,SAAU0d,EAAWtI,GACpCla,EAAMyiB,uBAAuB,CAACD,GAAYxiB,EAAMof,eAAelF,MAGnEnb,KAAKugB,SAASxa,QAAQ,SAAU0c,GAI5B,IADA,IAAI7H,EAAO,GACFO,EAAI,EAAGA,EAAIoI,EAASzc,OAAQqU,IAC7Bla,EAAMggB,YAAY9F,GAAGsH,SAAWA,GAChC7H,EAAK6C,KAAK8F,EAASpI,IAG3Bla,EAAMyiB,uBAAuB9I,EAAM6H,KAGvCa,EAAWvd,QAAQ,SAAU4d,EAAWxI,GACpCla,EAAMyiB,uBAAuB,CAACC,GAAY1iB,EAAMqf,eAAenF,MAGnElQ,MAAM2Y,KAAK5jB,KAAKke,kBAAkB2F,UAAU9d,QAAQ,SAAUod,GAAO,OAAOA,EAAIrK,wBAcpF9B,EAAS9S,UAAUgd,kBAOnB,WAEI,IAAIF,EAAa,GAIb8C,EAAuB9jB,KAAK2e,qBAChC3e,KAAK2e,qBAAuB,IAAIR,IAGhC,IAAK,IAAIhD,EAAI,EAAGA,EAAInb,KAAK8U,MAAMhO,OAAQqU,IAAK,CAExC,IAAIxH,EAAO3T,KAAK8U,MAAMqG,GAElB4I,EAAoB/jB,KAAKgkB,sBAAsBrQ,EAAMwH,EAAG2I,EAAqB3f,IAAIwP,IAChF3T,KAAK2e,qBAAqBsF,IAAItQ,IAC/B3T,KAAK2e,qBAAqBva,IAAIuP,EAAM,IAAIuQ,SAE5C,IAAK,IAAIxH,EAAI,EAAGA,EAAIqH,EAAkBjd,OAAQ4V,IAAK,CAE/C,IAAIyH,EAAYJ,EAAkBrH,GAE9B0H,EAA2BpkB,KAAK2e,qBAAqBxa,IAAIggB,EAAUxQ,MACnEyQ,EAAMH,IAAIE,EAAU1B,QACD2B,EAAMjgB,IAAIggB,EAAU1B,QAAUhF,KAAK0G,GAGtDC,EAAMhgB,IAAI+f,EAAU1B,OAAQ,CAAC0B,IAEjCnD,EAAWvD,KAAK0G,IAGxB,OAAOnD,GAiBXhK,EAAS9S,UAAU8f,sBAUnB,SAAUrQ,EAAMsM,EAAWmE,GAGvB,OADcpkB,KAAKqkB,YAAY1Q,EAAMsM,GACtBjd,IAAI,SAAUyf,GAEzB,IAAI6B,EAAoBF,GAASA,EAAMH,IAAIxB,GAA8B2B,EAAMjgB,IAAIse,GAAY,GAC/F,GAAI6B,EAAiBxd,OAAQ,CAEzB,IAAIiZ,EAA6BuE,EAAiBC,QAElD,OADAxE,EAAQE,UAAYA,EACbF,EAGP,MAAO,CAAEpM,KAAMA,EAAM8O,OAAQA,EAAQxC,UAAWA,MAU5DjJ,EAAS9S,UAAUkc,iBAKnB,WACI,IAAInf,EAAQjB,KACZA,KAAKke,kBAAkB/S,QAENqZ,EAAqBxkB,KAAKykB,mBAAoBzkB,KAAKoe,mBACzDrY,QAAQ,SAAUgN,GACzB,GAAI9R,EAAMid,kBAAkB+F,IAAIlR,EAAUmG,MACtC,MAj0CLvU,MAAM,+CAi0CsCoO,EAAUmG,KAj0CS,MAm0C9DjY,EAAMid,kBAAkB9Z,IAAI2O,EAAUmG,KAAMnG,MASpDiE,EAAS9S,UAAUic,cAKnB,WACIngB,KAAKqgB,eACDmE,EAAqBxkB,KAAK0kB,sBAAuB1kB,KAAKue,sBAC1Dve,KAAKsgB,eACDkE,EAAqBxkB,KAAK2kB,sBAAuB3kB,KAAKwe,sBAC1Dxe,KAAKugB,SACDiE,EAAqBxkB,KAAK4kB,gBAAiB5kB,KAAKse,gBAGpD,IAAIuG,EAAiB7kB,KAAKugB,SAASjM,OAAO,SAAU6O,GAAO,OAAQA,EAAI2B,OACvE,IAAK9kB,KAAK+kB,uBAAyBF,EAAe/d,OAAS,EACvD,MAp1CDnC,MAAM,wEAs1CT3E,KAAKglB,eAAiBH,EAAe,IAczC7N,EAAS9S,UAAUsc,sBAOnB,WAEI,IAAIyE,EAAqB,SAAUC,EAAK/B,GAAO,OAAO+B,KAAS/B,EAAIxJ,kBAE/D3Z,KAAKugB,SAAS7S,OAAOuX,GAAoB,IACzCjlB,KAAK2f,uBAGL3f,KAAKqgB,eAAe3S,OAAOuX,GAAoB,IAC/CjlB,KAAKygB,yBAELzgB,KAAKsgB,eAAe5S,OAAOuX,GAAoB,IAC/CjlB,KAAK0gB,0BAgBb1J,EAAS9S,UAAUub,kBAQnB,SAAUD,GACNxf,KAAK8U,MAAQ,GACTjS,OAAAqV,EAAA,EAAArV,CAAa7C,KAAKwf,aAClBxf,KAAKwf,WAAW5I,WAAW5W,MAG3BA,KAAK2gB,4BACL3gB,KAAK2gB,0BAA0B5K,cAC/B/V,KAAK2gB,0BAA4B,MAEhCnB,IACGxf,KAAK8f,aACL9f,KAAK8f,YAAYpG,KAAK,IAE1B1Z,KAAK0f,WAAW7B,cAAc1S,SAElCnL,KAAKuf,YAAcC,GAQvBxI,EAAS9S,UAAU0c,sBAKnB,WACI,IAAI3f,EAAQjB,KAEZ,GAAKA,KAAKwf,WAAV,CAIA,IAAIjK,EAUJ,GATI1S,OAAAqV,EAAA,EAAArV,CAAa7C,KAAKwf,YAClBjK,EAAavV,KAAKwf,WAAW7I,QAAQ3W,MAEhCA,KAAKwf,sBAAsB/M,EAAA,EAChC8C,EAAavV,KAAKwf,WAEbvU,MAAMC,QAAQlL,KAAKwf,cACxBjK,EAAa1S,OAAA6P,EAAA,EAAA7P,CAAG7C,KAAKwf,kBAEN1R,IAAfyH,EACA,MAn6CD5Q,MAAM,0EAq6CT3E,KAAK2gB,0BAA4BpL,EAC5BlS,KAAKR,OAAAsV,EAAA,EAAAtV,CAAU7C,KAAKie,aACpB7Y,UAAU,SAAUuO,GACrB1S,EAAM6T,MAAQnB,GAAQ,GACtB1S,EAAM+f,iBAadhK,EAAS9S,UAAUuc,uBAMnB,WACI,IAAIxf,EAAQjB,KAERA,KAAK8gB,iBAAiBjD,cAAc/W,OAAS,GAC7C9G,KAAK8gB,iBAAiBjD,cAAc1S,QAExCnL,KAAKqgB,eAAeta,QAAQ,SAAUod,EAAKhI,GAAK,OAAOla,EAAMkkB,WAAWlkB,EAAM6f,iBAAkBqC,EAAKhI,KACrGnb,KAAK+iB,8BACL/iB,KAAKgiB,4BAYThL,EAAS9S,UAAUwc,uBAMnB,WACI,IAAIzf,EAAQjB,KAERA,KAAK+gB,iBAAiBlD,cAAc/W,OAAS,GAC7C9G,KAAK+gB,iBAAiBlD,cAAc1S,QAExCnL,KAAKsgB,eAAeva,QAAQ,SAAUod,EAAKhI,GAAK,OAAOla,EAAMkkB,WAAWlkB,EAAM8f,iBAAkBoC,EAAKhI,KACrGnb,KAAKqjB,8BACLrjB,KAAKgiB,4BAUThL,EAAS9S,UAAUwf,uBAOnB,SAAU9I,EAAM6H,GACZ,IAAIxhB,EAAQjB,KAERolB,EAAana,MAAM2Y,KAAKnB,EAAOjJ,SAAW,IAAIxW,IAAI,SAAUqiB,GAE5D,IAAItS,EAAY9R,EAAMid,kBAAkB/Z,IAAIkhB,GAC5C,IAAKtS,EACD,MAAMsH,EAA2BgL,GAErC,OAAO,IAGP/J,EAAoB8J,EAAWpiB,IAAI,SAAU+P,GAAa,OAAOA,EAAUqQ,SAE3E7H,EAAkB6J,EAAWpiB,IAAI,SAAU+P,GAAa,OAAOA,EAAUuS,YAC7EtlB,KAAKkjB,cAAc7H,oBAAoBT,EAAMU,EAAmBC,IAQpEvE,EAAS9S,UAAU+e,iBAKnB,SAAUsC,GAGN,IADA,IAAIC,EAAe,GACVrK,EAAI,EAAGA,EAAIoK,EAAU1H,cAAc/W,OAAQqU,IAAK,CAErD,IAAIsK,EAAiDF,EAAU1H,cAAc1Z,IAAIgX,GACjFqK,EAAa/H,KAAKgI,EAAQC,UAAU,IAExC,OAAOF,GAiBXxO,EAAS9S,UAAUmgB,YASnB,SAAU1Q,EAAMsM,GACZ,GAA4B,GAAxBjgB,KAAKugB,SAASzZ,OACd,MAAO,CAAC9G,KAAKugB,SAAS,IAG1B,IAAIoF,EAAU,GACd,GAAI3lB,KAAK+kB,sBACLY,EAAU3lB,KAAKugB,SAASjM,OAAO,SAAU6O,GAAO,OAAQA,EAAI2B,MAAQ3B,EAAI2B,KAAK7E,EAAWtM,SAEvF,CAED,IAAI8O,EAASziB,KAAKugB,SAAS9U,KAAK,SAAU0X,GAAO,OAAOA,EAAI2B,MAAQ3B,EAAI2B,KAAK7E,EAAWtM,MAAa3T,KAAKglB,eACtGvC,GACAkD,EAAQlI,KAAKgF,GAGrB,IAAKkD,EAAQ7e,OACT,MAjlDZ,SAA4C6M,GACxC,OAAOhP,MAAM,sEACgB0a,KAAKC,UAAU3L,IA+kD9BiS,CAAmCjS,GAE7C,OAAOgS,GAcX3O,EAAS9S,UAAUsd,WAQnB,SAAU2C,EAAW0B,GAKjB7lB,KAAKmlB,WAAWnlB,KAAK0f,WAHRyE,EAAU1B,OAGkBoD,EAD3B,CAAE9D,UAAWoC,EAAUxQ,QAmBzCqD,EAAS9S,UAAUihB,WAWnB,SAAUW,EAAQrD,EAAQ5U,EAAOiU,QACb,IAAZA,IAAsBA,EAAU,IAEpCgE,EAAOjI,cAAckI,mBAAmBtD,EAAO1J,SAAU+I,EAASjU,GAClE,IAAK,IAAI4H,EAAK,EAAGuQ,EAAKhmB,KAAKimB,kBAAkBxD,GAAShN,EAAKuQ,EAAGlf,OAAQ2O,IAE9DkC,EAAcyC,sBACdzC,EAAcyC,qBAAqBD,eAAe4L,mBAFnCC,EAAGvQ,GAEiEqM,GAG3F9hB,KAAKS,mBAAmBgF,gBAY5BuR,EAAS9S,UAAU0d,uBAMnB,WAGI,IADA,IAAI/D,EAAgB7d,KAAK0f,WAAW7B,cAC3BgI,EAAc,EAAGK,EAAQrI,EAAc/W,OAAQ+e,EAAcK,EAAOL,IAAe,CAExF,IAEI/D,EAF6BjE,EAAc1Z,IAAI0hB,GAEF,QACjD/D,EAAQoE,MAAQA,EAChBpE,EAAQrS,MAAwB,IAAhBoW,EAChB/D,EAAQqE,KAAON,IAAgBK,EAAQ,EACvCpE,EAAQsE,KAAOP,EAAc,GAAM,EACnC/D,EAAQuE,KAAOvE,EAAQsE,KACnBpmB,KAAK+kB,uBACLjD,EAAQ7B,UAAYjgB,KAAKihB,YAAY4E,GAAa5F,UAClD6B,EAAQ+D,YAAcA,GAGtB/D,EAAQjU,MAAQ7N,KAAKihB,YAAY4E,GAAa5F,YAW1DjJ,EAAS9S,UAAU+hB,kBAMnB,SAAUxD,GACN,IAAIxhB,EAAQjB,KACZ,OAAKyiB,GAAWA,EAAOjJ,QAGhBvO,MAAM2Y,KAAKnB,EAAOjJ,QAAS,SAAU8M,GAExC,IAAIzM,EAAS5Y,EAAMid,kBAAkB/Z,IAAImiB,GACzC,IAAKzM,EACD,MAAMQ,EAA2BiM,GAErC,OAAO7D,EAAO7I,oBAAoBC,KAR3B,IAiBf7C,EAAS9S,UAAU2b,0BAKnB,WAYI,IATA,IAAI0G,EAAcvmB,KAAK+d,WAAayI,SAEhCC,EAAmBF,EAAYG,yBAO1BjR,EAAK,EAAGkR,EALF,CACX,CAAEC,IAAK,QAASd,OAAQ9lB,KAAK8gB,kBAC7B,CAAE8F,IAAK,QAASd,OAAQ9lB,KAAK0f,YAC7B,CAAEkH,IAAK,QAASd,OAAQ9lB,KAAK+gB,mBAEOtL,EAAKkR,EAAW7f,OAAQ2O,IAAM,CAClE,IAAIoR,EAAUF,EAAWlR,GAErBqH,EAAUyJ,EAAYO,cAAcD,EAAQD,KAChD9J,EAAQiK,YAAYF,EAAQf,OAAOnlB,WAAWsG,eAC9Cwf,EAAiBM,YAAYjK,GAGjC9c,KAAKE,YAAY+G,cAAc8f,YAAYN,IAc/CzP,EAAS9S,UAAUyb,qBAOnB,WACI3f,KAAK8f,YAAYpG,KAAK,IACtB1Z,KAAK0f,WAAW7B,cAAc1S,QAC9BnL,KAAKghB,aACLhhB,KAAKgiB,4BAcThL,EAAS9S,UAAU2c,mBAOnB,WAEI,IAAImG,EAAqB,SAAU9B,EAAKjnB,GACpC,OAAOinB,GAAOjnB,EAAE4a,oBAKhB7Y,KAAKqgB,eAAe3S,OAAOsZ,GAAoB,IAC/ChnB,KAAK+iB,8BAEL/iB,KAAKsgB,eAAe5S,OAAOsZ,GAAoB,IAC/ChnB,KAAKqjB,8BAELpY,MAAM2Y,KAAK5jB,KAAKke,kBAAkB2F,UAAUnW,OAAOsZ,GAAoB,IACvEhnB,KAAKgiB,4BAebhL,EAAS9S,UAAU0b,mBAOnB,WACI,IAAI3e,EAAQjB,KAGZA,KAAKkjB,cAAgB,IAAI3I,EAAava,KAAKkf,mBAE3Clf,KAAK8S,eAHW9S,KAAKY,KAAOZ,KAAKY,KAAKb,MAAQ,OAGdC,KAAKge,WAAYhe,KAAKge,UAAUiJ,YAC/DjnB,KAAKY,KAAOZ,KAAKY,KAAKsL,OAASrJ,OAAA6P,EAAA,EAAA7P,IAC3BQ,KAAKR,OAAAsV,EAAA,EAAAtV,CAAU7C,KAAKie,aACpB7Y,UAAU,SAAUrF,GACrBkB,EAAMiiB,cAAcjP,UAAYlU,EAChCkB,EAAM+gB,8BAoCPhL,EA3zCkB,GAo0C7B,SAASwN,EAAqB0C,EAAW9iB,GACrC,OAAO8iB,EAAUra,UAAU2W,OAAOvY,MAAM2Y,KAAKxf,IAQjD,IAoBI2T,EAAgC,WAUhC,OATA,aAD+B,sCCtlFnC/Z,EAAAC,EAAAC,EAAA,sBAAAipB,IAAAnpB,EAAAC,EAAAC,EAAA,sBAAAkpB,IAAA,IAAAC,EAAArpB,EAAA,QAAAspB,GAAAtpB,EAAA,QAAAA,EAAA,SAAAupB,EAAAvpB,EAAA,QAAAwpB,EAAAxpB,EAAA,QAuBImpB,GAvBJnpB,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAuB2BqpB,EAAA,GAAQ,CAAEI,cAAe,EAAGC,OADhC,CAAC,qkEACyD/T,KAAM,CAAEgU,UAAa,CAAC,CAAEC,KAAM,EAAG1O,KAAM,iBAAkB2O,YAAa,CAAC,CAAED,KAAM,EAAG1O,KAAM,OAAQwO,OAAQ,CAAEE,KAAM,EAAGF,OAAQ,CAAEI,UAAW,cAAeC,SAAU,OAAQC,QAAS,GAAKC,OAAQ,MAAQnlB,aAASgL,GAAa,CAAE8Z,KAAM,EAAG1O,KAAM,UAAWwO,OAAQ,CAAEE,KAAM,EAAGF,OAAQ,CAAEM,QAAS,EAAGD,SAAU,oBAAqBD,UAAW,aAAeG,OAAQ,MAAQnlB,aAASgL,GAAa,CAAE8Z,KAAM,EAAG1O,KAAM,mBAAoBwO,OAAQ,CAAEE,KAAM,EAAGF,OAAQ,CAAEM,QAAS,EAAGD,SAAU,oBAAqBD,UAAW,aAAeG,OAAQ,MAAQnlB,aAASgL,GAAa,CAAE8Z,KAAM,EAAGM,KAAM,YAAaP,UAAW,CAAEC,KAAM,EAAGF,OAAQ,KAAMS,QAAS,oCAAsCrlB,QAAS,MAAQ,CAAE8kB,KAAM,EAAGM,KAAM,YAAaP,UAAW,CAAEC,KAAM,EAAGF,OAAQ,CAAEE,KAAM,EAAGF,OAAQ,CAAEM,QAAS,GAAKC,OAAQ,MAAQE,QAAS,qBAAuBrlB,QAAS,OAASA,QAAS,SAE36B,SAASslB,EAAiBC,GAAM,OAAOhB,EAAA,GAAQ,EAAG,ECzB4HgB,MAAAhB,EAAA,2FAA0DgB,MAAAhB,EAAA,mCAAAiB,EAAAC,GAAAD,EAAAC,EAAA,IAAAA,EAAAC,UAAAzZ,aAAA,UD0BxO,SAAS0Z,EAAiBJ,GAAM,OAAOhB,EAAA,GAAQ,EAAG,EC1BgTgB,MAAAhB,EAAA,yDAAuBgB,MAAAhB,EAAA,mCAAAiB,EAAAC,GAAAD,EAAAC,EAAA,IAAAA,EAAAC,UAAAE,cAAA,UD2BzX,SAASC,EAAiBN,GAAM,OAAOhB,EAAA,GAAQ,EAAG,CC3B0WA,EAAA,YAA6DgB,MAAAhB,EAAA,+BD4Bzd,SAASuB,EAAiBP,GAAM,OAAOhB,EAAA,GAAQ,EAAG,EC5ByNgB,MAAAhB,EAAA,yFAAAA,EAAA,kBAAAC,EAAA,MAAAuB,SAAA,uBAAuFR,MAAAhB,EAAA,6BAAAoB,IAAApB,EAAA,kBAAAC,EAAA,GAAAD,EAAA,EAAAA,EAAA,EAAAC,EAAA,eAA0De,MAAAhB,EAAA,6BAAAsB,IAAAtB,EAAA,mBAAAC,EAAA,GAAAD,EAAA,EAAAA,EAAA,EAAAC,EAAA,IAAAwB,aAAA,2BAA6D,SAAAR,EAAAC,GAA9MD,EAAAC,EAAA,MAA8MA,EAAAC,UAAxHO,eAA2DT,EAAAC,EAAA,KAAwC,IAAoB,MD6Bxd,SAASS,EAAiBX,GAAM,OAAOhB,EAAA,GAAQ,EAAG,EC7B4gCgB,MAAAhB,EAAA,gLAAAkB,EAAAU,EAAAC,GAAA,IAAAC,GAAA,EAAAC,EAAAb,EAA+UC,UAA/U,MAAiJ,yBAAAS,ID+BvsCE,GADmE,IAAvDC,EAAInnB,0BAA0BwC,KAAKykB,EAAOG,UACxCF,GC/Bo1C,YAAAF,IDkCl2CE,GAD2C,IAA/BC,EAAI5gB,eAAe0gB,IACjBC,GClCwiCA,GAAA,YAAA9B,EAAA,mBAAAC,EAAA,GAAAD,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAAA,EAAA,IAAAiC,MAAA,YAAAC,QAAA,qBAA+UlC,EAAA,YAAY,SAAAiB,EAAAC,GAAA,IAAAa,EAAAb,EAAAC,UAA3VF,EAAAC,EAAA,IAAYlB,EAAA,yBAAA+B,EAAA7e,iBAAA,IAAgD6e,EAAsBI,aAAA,SAAAlB,EAAAC,GAAA,IAAAa,EAAAb,EAAAC,UAAlFF,EAAAC,EAAA,IAAmFa,EAAAjkB,SAAA,6BAAsIikB,EAA0CpnB,iBAAConB,EAAuCxnB,oBDoCl2C,SAASwlB,EAAiBiB,GAAM,OAAOhB,EAAA,GAAQ,EAAG,CAACA,EAAA,GAAQ,UAAW,EAAG,CAAErgB,QAAS,IAAMqgB,EAAA,GAAQ,UAAW,EAAG,CAAEhd,MAAO,IAAMgd,EAAA,GAAQ,UAAW,EAAG,CAAE9hB,WAAY,KCpC1K8iB,MAAAhB,EAAA,2JAAAkB,EAAAU,EAAAC,GAAA,IAAAC,GAAA,QAAsE,UAAAF,IDsC9DE,GAD6B,ICrCrCZ,EAA6HC,UDqCrG7hB,UACFwiB,GCtCtBA,GAAA,YAAA9B,EAAA,4BAAAE,EAAA,GAAAF,EAAA,eAA6HgB,MAAAhB,EAAA,mFAAAA,EAAA,kBAAAC,EAAA,MAAAuB,SAAA,uBAAiDR,MAAAhB,EAAA,6BAAAe,IAAAf,EAAA,mBAAAC,EAAA,GAAAD,EAAA,EAAAA,EAAA,EAAAC,EAAA,IAAAwB,aAAA,2BAA6FT,MAAAhB,EAAA,6BAAAuB,IAAAvB,EAAA,oBAAAC,EAAA,GAAAD,EAAA,EAAAA,EAAA,EAAAC,EAAA,IAAAwB,aAAA,2BAAwOT,MAAAhB,EAAA,6FAAsCgB,MAAAhB,EAAA,qFAAgDgB,MAAAhB,EAAA,iCAAAkB,EAAAU,EAAAC,GAAA,IAAAC,GAAA,EAAAC,EAAAb,EAAqfC,UAArf,MAA+a,kBAAAS,IDyCh/BE,GAD4B,IAAhBC,EAAIxiB,SACFuiB,GCzC4/B,WAAAF,ID4C1gCE,GADkC,IAAtBC,EAAIpf,eACFmf,GC5CqhC,WAAAF,ID+CniCE,GAD4B,IAAhBC,EAAIxiB,SACFuiB,GC/CmjBA,GAAAH,IAAA3B,EAAA,uBAAAE,EAAA,GAAAA,EAAA,EAAAF,EAAA,EAAAA,EAAA,EAAAE,EAAA,KAAAC,EAAA,KAAAiC,OAAA,aAAA9L,UAAA,gBAAA+L,QAAA,cAAA3B,SAAA,eAAA4B,cAAA,oBAAAC,eAAA,qBAAA/iB,KAAA,WAAAgjB,YAAA,kBAAAC,aAAA,qBAAAC,cAAA,gBAAAC,OAAA,SAAAC,OAAA,YAAqf,SAAA3B,EAAAC,GAAA,IAAAa,EAAAb,EAAAC,UAAj8BF,EAAAC,EAAA,IAA8Ba,EAAkBjhB,OAACmgB,EAAAC,EAAA,KAAqC,GAAwDD,EAAAC,EAAA,MAAoC,GAA0RD,EAAAC,EAAA,KAA4NlB,EAAA,GAAAkB,EAAA,GAA2Ea,EAA2CjnB,WAAqDinB,EAAuClnB,SAA3F,MAAAknB,EAAAriB,aAAA,KAAAqiB,EAAmDriB,aAAAgJ,MAApS,mCAAoEqZ,EAAqDtlB,gBAAsCslB,EAAqC/jB,UAAnO,GAAhC,KAA+B","file":"4.c611deb108e302b4d410.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nvar matSelectAnimations = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nvar transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nvar fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nvar SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nvar SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nvar SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nvar MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nvar  /**\n * Change event object that is emitted when the select value has changed.\n */\nMatSelectChange = /** @class */ (function () {\n    function MatSelectChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MatSelectChange;\n}());\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nMatSelectBase = /** @class */ (function () {\n    function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatSelectBase;\n}());\n/** @type {?} */\nvar _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nvar MatSelectTrigger = /** @class */ (function () {\n    function MatSelectTrigger() {\n    }\n    MatSelectTrigger.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-select-trigger'\n                },] },\n    ];\n    return MatSelectTrigger;\n}());\nvar MatSelect = /** @class */ (function (_super) {\n    __extends(MatSelect, _super);\n    function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        var _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._viewportRuler = _viewportRuler;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._ngZone = _ngZone;\n        _this._dir = _dir;\n        _this._parentFormField = _parentFormField;\n        _this.ngControl = ngControl;\n        _this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        _this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        _this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        _this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        _this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        _this._compareWith = function (o1, o2) { return o1 === o2; };\n        /**\n         * Unique id for this input.\n         */\n        _this._uid = \"mat-select-\" + nextUniqueId++;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        _this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        _this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        _this._onChange = function () { };\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        _this._onTouched = function () { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        _this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        _this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        _this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        _this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        _this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        _this._disableOptionCentering = false;\n        _this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        _this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        _this.optionSelectionChanges = defer(function () {\n            if (_this.options) {\n                return merge.apply(void 0, _this.options.map(function (option) { return option.onSelectionChange; }));\n            }\n            return _this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(function () { return _this.optionSelectionChanges; }));\n        });\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        _this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        _this._openedStream = _this.openedChange.pipe(filter(function (o) { return o; }), map(function () { }));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        _this._closedStream = _this.openedChange.pipe(filter(function (o) { return !o; }), map(function () { }));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        _this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        _this.valueChange = new EventEmitter();\n        if (_this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            _this.ngControl.valueAccessor = _this;\n        }\n        _this._scrollStrategyFactory = scrollStrategyFactory;\n        _this._scrollStrategy = _this._scrollStrategyFactory();\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        return _this;\n    }\n    Object.defineProperty(MatSelect.prototype, \"focused\", {\n        /** Whether the select is focused. */\n        get: /**\n         * Whether the select is focused.\n         * @return {?}\n         */\n        function () {\n            return this._focused || this._panelOpen;\n        },\n        /**\n         * @deprecated Setter to be removed as this property is intended to be readonly.\n         * @breaking-change 8.0.0\n         */\n        set: /**\n         * @deprecated Setter to be removed as this property is intended to be readonly.\n         * \\@breaking-change 8.0.0\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._focused = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"placeholder\", {\n        /** Placeholder to be shown if no value has been selected. */\n        get: /**\n         * Placeholder to be shown if no value has been selected.\n         * @return {?}\n         */\n        function () { return this._placeholder; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._placeholder = value;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"required\", {\n        /** Whether the component is required. */\n        get: /**\n         * Whether the component is required.\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"multiple\", {\n        /** Whether the user should be allowed to select multiple options. */\n        get: /**\n         * Whether the user should be allowed to select multiple options.\n         * @return {?}\n         */\n        function () { return this._multiple; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._selectionModel) {\n                throw getMatSelectDynamicMultipleError();\n            }\n            this._multiple = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"disableOptionCentering\", {\n        /** Whether to center the active option over the trigger. */\n        get: /**\n         * Whether to center the active option over the trigger.\n         * @return {?}\n         */\n        function () { return this._disableOptionCentering; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disableOptionCentering = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"compareWith\", {\n        /**\n         * Function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         */\n        get: /**\n         * Function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         * @return {?}\n         */\n        function () { return this._compareWith; },\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw getMatSelectNonFunctionValueError();\n            }\n            this._compareWith = fn;\n            if (this._selectionModel) {\n                // A different comparator means the selection could change.\n                this._initializeSelection();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"value\", {\n        /** Value of the select control. */\n        get: /**\n         * Value of the select control.\n         * @return {?}\n         */\n        function () { return this._value; },\n        set: /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        function (newValue) {\n            if (newValue !== this._value) {\n                this.writeValue(newValue);\n                this._value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"id\", {\n        /** Unique id of the element. */\n        get: /**\n         * Unique id of the element.\n         * @return {?}\n         */\n        function () { return this._id; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._id = value || this._uid;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(function () {\n            if (_this.panelOpen) {\n                _this._scrollTop = 0;\n                _this.openedChange.emit(true);\n            }\n            else {\n                _this.openedChange.emit(false);\n                _this.overlayDir.offsetX = 0;\n                _this._changeDetectorRef.markForCheck();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n            event.added.forEach(function (option) { return option.select(); });\n            event.removed.forEach(function (option) { return option.deselect(); });\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n            _this._resetOptions();\n            _this._initializeSelection();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    };\n    /** Toggles the overlay panel open or closed. */\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    MatSelect.prototype.toggle = /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    function () {\n        this.panelOpen ? this.close() : this.open();\n    };\n    /** Opens the overlay panel. */\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    MatSelect.prototype.open = /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n            if (_this._triggerFontSize && _this.overlayDir.overlayRef &&\n                _this.overlayDir.overlayRef.overlayElement) {\n                _this.overlayDir.overlayRef.overlayElement.style.fontSize = _this._triggerFontSize + \"px\";\n            }\n        });\n    };\n    /** Closes the overlay panel and focuses the host element. */\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    MatSelect.prototype.close = /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    function () {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    };\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MatSelect.prototype.writeValue = /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    function (value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    };\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MatSelect.prototype.registerOnChange = /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MatSelect.prototype.registerOnTouched = /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    MatSelect.prototype.setDisabledState = /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    };\n    Object.defineProperty(MatSelect.prototype, \"panelOpen\", {\n        /** Whether or not the overlay panel is open. */\n        get: /**\n         * Whether or not the overlay panel is open.\n         * @return {?}\n         */\n        function () {\n            return this._panelOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"selected\", {\n        /** The currently selected option. */\n        get: /**\n         * The currently selected option.\n         * @return {?}\n         */\n        function () {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"triggerValue\", {\n        /** The value displayed in the trigger. */\n        get: /**\n         * The value displayed in the trigger.\n         * @return {?}\n         */\n        function () {\n            if (this.empty) {\n                return '';\n            }\n            if (this._multiple) {\n                /** @type {?} */\n                var selectedOptions = this._selectionModel.selected.map(function (option) { return option.viewValue; });\n                if (this._isRtl()) {\n                    selectedOptions.reverse();\n                }\n                // TODO(crisbeto): delimiter should be configurable for proper localization.\n                return selectedOptions.join(', ');\n            }\n            return this._selectionModel.selected[0].viewValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Whether the element is in RTL mode. */\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    MatSelect.prototype._isRtl = /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    function () {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    };\n    /** Handles all keydown events on the select. */\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleKeydown = /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    };\n    /** Handles keyboard events while the select is closed. */\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleClosedKeydown = /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n        /** @type {?} */\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        var manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            var selectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption !== this.selected) {\n                this._liveAnnouncer.announce(((/** @type {?} */ (this.selected))).viewValue);\n            }\n        }\n    };\n    /** Handles keyboard events when the selected is open. */\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleOpenKeydown = /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n        /** @type {?} */\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        var manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            var hasDeselectedOptions_1 = this.options.some(function (opt) { return !opt.disabled && !opt.selected; });\n            this.options.forEach(function (option) {\n                if (!option.disabled) {\n                    hasDeselectedOptions_1 ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            /** @type {?} */\n            var previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype._onFocus = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    MatSelect.prototype._onBlur = /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    function () {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    MatSelect.prototype._onAttached = /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n            _this._setPseudoCheckboxPaddingSize();\n            _this._changeDetectorRef.detectChanges();\n            _this._calculateOverlayOffsetX();\n            _this.panel.nativeElement.scrollTop = _this._scrollTop;\n        });\n    };\n    /** Returns the theme to be used on the panel. */\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    MatSelect.prototype._getPanelTheme = /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    function () {\n        return this._parentFormField ? \"mat-\" + this._parentFormField.color : '';\n    };\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._setPseudoCheckboxPaddingSize = \n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n            /** @type {?} */\n            var pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n            if (pseudoCheckbox) {\n                SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n            }\n        }\n    };\n    Object.defineProperty(MatSelect.prototype, \"empty\", {\n        /** Whether the select has a value. */\n        get: /**\n         * Whether the select has a value.\n         * @return {?}\n         */\n        function () {\n            return !this._selectionModel || this._selectionModel.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._initializeSelection = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n            _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);\n            _this.stateChanges.next();\n        });\n    };\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    MatSelect.prototype._setSelectionByValue = /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            var correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    MatSelect.prototype._selectValue = /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var correspondingOption = this.options.find(function (option) {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && _this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    };\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._initKeyManager = /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            _this.focus();\n            _this.close();\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n            if (_this._panelOpen && _this.panel) {\n                _this._scrollActiveOptionIntoView();\n            }\n            else if (!_this._panelOpen && !_this.multiple && _this._keyManager.activeItem) {\n                _this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    };\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._resetOptions = /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n            _this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !_this.multiple && _this._panelOpen) {\n                _this.close();\n                _this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge.apply(void 0, this.options.map(function (option) { return option._stateChanges; })).pipe(takeUntil(changedOrDestroyed))\n            .subscribe(function () {\n            _this._changeDetectorRef.markForCheck();\n            _this.stateChanges.next();\n        });\n        this._setOptionIds();\n    };\n    /** Invoked when an option is clicked. */\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    MatSelect.prototype._onSelect = /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    function (option, isUserInput) {\n        /** @type {?} */\n        var wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    };\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._sortValues = /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.multiple) {\n            /** @type {?} */\n            var options_1 = this.options.toArray();\n            this._selectionModel.sort(function (a, b) {\n                return _this.sortComparator ? _this.sortComparator(a, b, options_1) :\n                    options_1.indexOf(a) - options_1.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    };\n    /** Emits change event to set the model value. */\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    MatSelect.prototype._propagateChanges = /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    function (fallbackValue) {\n        /** @type {?} */\n        var valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map(function (option) { return option.value; });\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Records option IDs to pass to the aria-owns property. */\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._setOptionIds = /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');\n    };\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._highlightCorrectOption = /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    };\n    /** Scrolls the active option into view. */\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._scrollActiveOptionIntoView = /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    };\n    /** Focuses the select element. */\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    MatSelect.prototype.focus = /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    function () {\n        this._elementRef.nativeElement.focus();\n    };\n    /** Gets the index of the provided option in the option list. */\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    MatSelect.prototype._getOptionIndex = /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    function (option) {\n        return this.options.reduce(function (result, current, index) {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    };\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayPosition = /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var items = this._getItemCount();\n        /** @type {?} */\n        var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        var scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        var maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        var selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        var scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    };\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayScroll = /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        var halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    };\n    /** Returns the aria-label of the select component. */\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaLabel = /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    function () {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    };\n    /** Returns the aria-labelledby of the select component. */\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaLabelledby = /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    function () {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    };\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaActiveDescendant = /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    function () {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    };\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayOffsetX = /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        var viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        /** @type {?} */\n        var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        var offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            var selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        var rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    };\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayOffsetY = /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        var optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    };\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._checkOverlayWithinViewport = /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (maxScroll) {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        var panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    };\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    MatSelect.prototype._adjustPanelUp = /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    function (panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% bottom 0px\";\n        }\n    };\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._adjustPanelDown = /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% top 0px\";\n            return;\n        }\n    };\n    /** Sets the transform origin point based on the selected option. */\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._getOriginBasedOnOption = /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return \"50% \" + originY + \"px 0px\";\n    };\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._getItemCount = /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this.options.length + this.optionGroups.length;\n    };\n    /** Calculates the height of the select's options. */\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._getItemHeight = /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    MatSelect.prototype.setDescribedByIds = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) {\n        this._ariaDescribedby = ids.join(' ');\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatSelect.prototype.onContainerClick = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this.focus();\n        this.open();\n    };\n    Object.defineProperty(MatSelect.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            return this._panelOpen || !this.empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatSelect.decorators = [\n        { type: Component, args: [{selector: 'mat-select',\n                    exportAs: 'matSelect',\n                    template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></ng-template>\",\n                    styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                    inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'role': 'listbox',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-label]': '_getAriaLabel()',\n                        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        'class': 'mat-select',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    },\n                    animations: [\n                        matSelectAnimations.transformPanel\n                    ],\n                    providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    MatSelect.ctorParameters = function () { return [\n        { type: ViewportRuler },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: ErrorStateMatcher },\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: MatFormField, decorators: [{ type: Optional }] },\n        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n        { type: LiveAnnouncer }\n    ]; };\n    MatSelect.propDecorators = {\n        trigger: [{ type: ViewChild, args: ['trigger',] }],\n        panel: [{ type: ViewChild, args: ['panel',] }],\n        overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n        options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n        optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n        panelClass: [{ type: Input }],\n        customTrigger: [{ type: ContentChild, args: [MatSelectTrigger,] }],\n        placeholder: [{ type: Input }],\n        required: [{ type: Input }],\n        multiple: [{ type: Input }],\n        disableOptionCentering: [{ type: Input }],\n        compareWith: [{ type: Input }],\n        value: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        errorStateMatcher: [{ type: Input }],\n        sortComparator: [{ type: Input }],\n        id: [{ type: Input }],\n        openedChange: [{ type: Output }],\n        _openedStream: [{ type: Output, args: ['opened',] }],\n        _closedStream: [{ type: Output, args: ['closed',] }],\n        selectionChange: [{ type: Output }],\n        valueChange: [{ type: Output }]\n    };\n    return MatSelect;\n}(_MatSelectMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatSelectModule = /** @class */ (function () {\n    function MatSelectModule() {\n    }\n    MatSelectModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n                },] },\n    ];\n    return MatSelectModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n//# sourceMappingURL=select.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nvar MatTable = /** @class */ (function (_super) {\n    __extends(MatTable, _super);\n    function MatTable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        _this.stickyCssClass = 'mat-table-sticky';\n        return _this;\n    }\n    MatTable.decorators = [\n        { type: Component, args: [{selector: 'mat-table, table[mat-table]',\n                    exportAs: 'matTable',\n                    template: CDK_TABLE_TEMPLATE,\n                    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                    host: {\n                        'class': 'mat-table',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    return MatTable;\n}(CdkTable));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nvar MatCellDef = /** @class */ (function (_super) {\n    __extends(MatCellDef, _super);\n    function MatCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatCellDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n                },] },\n    ];\n    return MatCellDef;\n}(CdkCellDef));\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nvar MatHeaderCellDef = /** @class */ (function (_super) {\n    __extends(MatHeaderCellDef, _super);\n    function MatHeaderCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatHeaderCellDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n                },] },\n    ];\n    return MatHeaderCellDef;\n}(CdkHeaderCellDef));\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nvar MatFooterCellDef = /** @class */ (function (_super) {\n    __extends(MatFooterCellDef, _super);\n    function MatFooterCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatFooterCellDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n                },] },\n    ];\n    return MatFooterCellDef;\n}(CdkFooterCellDef));\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nvar MatColumnDef = /** @class */ (function (_super) {\n    __extends(MatColumnDef, _super);\n    function MatColumnDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatColumnDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                    ],\n                },] },\n    ];\n    MatColumnDef.propDecorators = {\n        name: [{ type: Input, args: ['matColumnDef',] }],\n        sticky: [{ type: Input }],\n        stickyEnd: [{ type: Input }]\n    };\n    return MatColumnDef;\n}(CdkColumnDef));\n/**\n * Header cell template container that adds the right classes and role.\n */\nvar MatHeaderCell = /** @class */ (function (_super) {\n    __extends(MatHeaderCell, _super);\n    function MatHeaderCell(columnDef, elementRef) {\n        var _this = _super.call(this, columnDef, elementRef) || this;\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    MatHeaderCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-header-cell',\n                        'role': 'columnheader',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatHeaderCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return MatHeaderCell;\n}(CdkHeaderCell));\n/**\n * Footer cell template container that adds the right classes and role.\n */\nvar MatFooterCell = /** @class */ (function (_super) {\n    __extends(MatFooterCell, _super);\n    function MatFooterCell(columnDef, elementRef) {\n        var _this = _super.call(this, columnDef, elementRef) || this;\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    MatFooterCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-footer-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatFooterCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return MatFooterCell;\n}(CdkFooterCell));\n/**\n * Cell template container that adds the right classes and role.\n */\nvar MatCell = /** @class */ (function (_super) {\n    __extends(MatCell, _super);\n    function MatCell(columnDef, elementRef) {\n        var _this = _super.call(this, columnDef, elementRef) || this;\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    MatCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return MatCell;\n}(CdkCell));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nvar MatHeaderRowDef = /** @class */ (function (_super) {\n    __extends(MatHeaderRowDef, _super);\n    function MatHeaderRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatHeaderRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                },] },\n    ];\n    return MatHeaderRowDef;\n}(CdkHeaderRowDef));\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nvar MatFooterRowDef = /** @class */ (function (_super) {\n    __extends(MatFooterRowDef, _super);\n    function MatFooterRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatFooterRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                },] },\n    ];\n    return MatFooterRowDef;\n}(CdkFooterRowDef));\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nvar MatRowDef = /** @class */ (function (_super) {\n    __extends(MatRowDef, _super);\n    function MatRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                },] },\n    ];\n    return MatRowDef;\n}(CdkRowDef));\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nvar MatHeaderRow = /** @class */ (function (_super) {\n    __extends(MatHeaderRow, _super);\n    function MatHeaderRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatHeaderRow.decorators = [\n        { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-header-row',\n                        'role': 'row',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                },] },\n    ];\n    return MatHeaderRow;\n}(CdkHeaderRow));\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nvar MatFooterRow = /** @class */ (function (_super) {\n    __extends(MatFooterRow, _super);\n    function MatFooterRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatFooterRow.decorators = [\n        { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-footer-row',\n                        'role': 'row',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                },] },\n    ];\n    return MatFooterRow;\n}(CdkFooterRow));\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nvar MatRow = /** @class */ (function (_super) {\n    __extends(MatRow, _super);\n    function MatRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatRow.decorators = [\n        { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-row',\n                        'role': 'row',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                },] },\n    ];\n    return MatRow;\n}(CdkRow));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n];\nvar MatTableModule = /** @class */ (function () {\n    function MatTableModule() {\n    }\n    MatTableModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CdkTableModule, CommonModule, MatCommonModule],\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                },] },\n    ];\n    return MatTableModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\nvar  /**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\nMatTableDataSource = /** @class */ (function (_super) {\n    __extends(MatTableDataSource, _super);\n    function MatTableDataSource(initialData) {\n        if (initialData === void 0) { initialData = []; }\n        var _this = _super.call(this) || this;\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        _this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        _this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        _this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        _this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        _this.sortingDataAccessor = function (data, sortHeaderId) {\n            /** @type {?} */\n            var value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (_isNumberValue(value)) {\n                /** @type {?} */\n                var numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        _this.sortData = function (data, sort) {\n            /** @type {?} */\n            var active = sort.active;\n            /** @type {?} */\n            var direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort(function (a, b) {\n                /** @type {?} */\n                var valueA = _this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                var valueB = _this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come first.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                var comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        _this.filterPredicate = function (data, filter) {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            var dataStr = Object.keys(data).reduce(function (currentTerm, key) {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }, '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            var transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        _this._data = new BehaviorSubject(initialData);\n        _this._updateChangeSubscription();\n        return _this;\n    }\n    Object.defineProperty(MatTableDataSource.prototype, \"data\", {\n        /** Array of data that should be rendered by the table, where each object represents one row. */\n        get: /**\n         * Array of data that should be rendered by the table, where each object represents one row.\n         * @return {?}\n         */\n        function () { return this._data.value; },\n        set: /**\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) { this._data.next(data); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"filter\", {\n        /**\n         * Filter term that should be used to filter out objects from the data array. To override how\n         * data objects match to this filter string, provide a custom function for filterPredicate.\n         */\n        get: /**\n         * Filter term that should be used to filter out objects from the data array. To override how\n         * data objects match to this filter string, provide a custom function for filterPredicate.\n         * @return {?}\n         */\n        function () { return this._filter.value; },\n        set: /**\n         * @param {?} filter\n         * @return {?}\n         */\n        function (filter) { this._filter.next(filter); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"sort\", {\n        /**\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n         * emitted by the MatSort will trigger an update to the table's rendered data.\n         */\n        get: /**\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n         * emitted by the MatSort will trigger an update to the table's rendered data.\n         * @return {?}\n         */\n        function () { return this._sort; },\n        set: /**\n         * @param {?} sort\n         * @return {?}\n         */\n        function (sort) {\n            this._sort = sort;\n            this._updateChangeSubscription();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"paginator\", {\n        /**\n         * Instance of the MatPaginator component used by the table to control what page of the data is\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n         * table's rendered data.\n         *\n         * Note that the data source uses the paginator's properties to calculate which page of data\n         * should be displayed. If the paginator receives its properties as template inputs,\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n         * initialized before assigning it to this data source.\n         */\n        get: /**\n         * Instance of the MatPaginator component used by the table to control what page of the data is\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n         * table's rendered data.\n         *\n         * Note that the data source uses the paginator's properties to calculate which page of data\n         * should be displayed. If the paginator receives its properties as template inputs,\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n         * initialized before assigning it to this data source.\n         * @return {?}\n         */\n        function () { return this._paginator; },\n        set: /**\n         * @param {?} paginator\n         * @return {?}\n         */\n        function (paginator) {\n            this._paginator = paginator;\n            this._updateChangeSubscription();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    MatTableDataSource.prototype._updateChangeSubscription = /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        var sortChange = this._sort ?\n            merge(this._sort.sortChange, this._sort.initialized) :\n            of(null);\n        /** @type {?} */\n        var pageChange = this._paginator ?\n            merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n            of(null);\n        /** @type {?} */\n        var dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        var filteredData = combineLatest(dataStream, this._filter)\n            .pipe(map(function (_a) {\n            var data = _a[0];\n            return _this._filterData(data);\n        }));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        var orderedData = combineLatest(filteredData, sortChange)\n            .pipe(map(function (_a) {\n            var data = _a[0];\n            return _this._orderData(data);\n        }));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        var paginatedData = combineLatest(orderedData, pageChange)\n            .pipe(map(function (_a) {\n            var data = _a[0];\n            return _this._pageData(data);\n        }));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(function (data) { return _this._renderData.next(data); });\n    };\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._filterData = /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var _this = this;\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter(function (obj) { return _this.filterPredicate(obj, _this.filter); });\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    };\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._orderData = /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    };\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._pageData = /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        var startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    };\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    MatTableDataSource.prototype._updatePaginator = /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    function (filteredDataLength) {\n        var _this = this;\n        Promise.resolve().then(function () {\n            /** @type {?} */\n            var paginator = _this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    _this._internalPageChanges.next();\n                }\n            }\n        });\n    };\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatTableDataSource.prototype.connect = /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { return this._renderData; };\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatTableDataSource.prototype.disconnect = /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { };\n    return MatTableDataSource;\n}(DataSource));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource };\n//# sourceMappingURL=table.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, EmbeddedViewRef, isDevMode, Optional, ViewChild, Inject, NgModule } from '@angular/core';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return /** @class */ (function (_super) {\n        __extends(class_1, _super);\n        function class_1() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var _this = _super.apply(this, args) || this;\n            _this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            _this._hasStickyChanged = false;\n            return _this;\n        }\n        Object.defineProperty(class_1.prototype, \"sticky\", {\n            /** Whether sticky positioning should be applied. */\n            get: /**\n             * Whether sticky positioning should be applied.\n             * @return {?}\n             */\n            function () { return this._sticky; },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                /** @type {?} */\n                var prevValue = this._sticky;\n                this._sticky = coerceBooleanProperty(v);\n                this._hasStickyChanged = prevValue !== this._sticky;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Whether the sticky value has changed since this was last called. */\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        class_1.prototype.hasStickyChanged = /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        };\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        class_1.prototype.resetStickyChanged = /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        function () {\n            this._hasStickyChanged = false;\n        };\n        return class_1;\n    }(base));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nvar CdkCellDef = /** @class */ (function () {\n    function CdkCellDef(/** @docs-private */ template) {\n        this.template = template;\n    }\n    CdkCellDef.decorators = [\n        { type: Directive, args: [{ selector: '[cdkCellDef]' },] },\n    ];\n    /** @nocollapse */\n    CdkCellDef.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CdkCellDef;\n}());\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nvar CdkHeaderCellDef = /** @class */ (function () {\n    function CdkHeaderCellDef(/** @docs-private */ template) {\n        this.template = template;\n    }\n    CdkHeaderCellDef.decorators = [\n        { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] },\n    ];\n    /** @nocollapse */\n    CdkHeaderCellDef.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CdkHeaderCellDef;\n}());\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nvar CdkFooterCellDef = /** @class */ (function () {\n    function CdkFooterCellDef(/** @docs-private */ template) {\n        this.template = template;\n    }\n    CdkFooterCellDef.decorators = [\n        { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] },\n    ];\n    /** @nocollapse */\n    CdkFooterCellDef.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CdkFooterCellDef;\n}());\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nCdkColumnDefBase = /** @class */ (function () {\n    function CdkColumnDefBase() {\n    }\n    return CdkColumnDefBase;\n}());\n/** @type {?} */\nvar _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nvar CdkColumnDef = /** @class */ (function (_super) {\n    __extends(CdkColumnDef, _super);\n    function CdkColumnDef() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._stickyEnd = false;\n        return _this;\n    }\n    Object.defineProperty(CdkColumnDef.prototype, \"name\", {\n        /** Unique name for this column. */\n        get: /**\n         * Unique name for this column.\n         * @return {?}\n         */\n        function () { return this._name; },\n        set: /**\n         * @param {?} name\n         * @return {?}\n         */\n        function (name) {\n            // If the directive is set without a name (updated programatically), then this setter will\n            // trigger with an empty string and should not overwrite the programatically set value.\n            if (!name) {\n                return;\n            }\n            this._name = name;\n            this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkColumnDef.prototype, \"stickyEnd\", {\n        /**\n         * Whether this column should be sticky positioned on the end of the row. Should make sure\n         * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n         * has been changed.\n         */\n        get: /**\n         * Whether this column should be sticky positioned on the end of the row. Should make sure\n         * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n         * has been changed.\n         * @return {?}\n         */\n        function () { return this._stickyEnd; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            /** @type {?} */\n            var prevValue = this._stickyEnd;\n            this._stickyEnd = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._stickyEnd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkColumnDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [{\n                            provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n                            useExisting: CdkColumnDef\n                        }],\n                },] },\n    ];\n    CdkColumnDef.propDecorators = {\n        name: [{ type: Input, args: ['cdkColumnDef',] }],\n        stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n        cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n        headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n        footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n    };\n    return CdkColumnDef;\n}(_CdkColumnDefBase));\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nvar  /**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nBaseCdkCell = /** @class */ (function () {\n    function BaseCdkCell(columnDef, elementRef) {\n        /** @type {?} */\n        var columnClassName = \"cdk-column-\" + columnDef.cssClassFriendlyName;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n    return BaseCdkCell;\n}());\n/**\n * Header cell template container that adds the right classes and role.\n */\nvar CdkHeaderCell = /** @class */ (function (_super) {\n    __extends(CdkHeaderCell, _super);\n    function CdkHeaderCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    CdkHeaderCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkHeaderCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return CdkHeaderCell;\n}(BaseCdkCell));\n/**\n * Footer cell template container that adds the right classes and role.\n */\nvar CdkFooterCell = /** @class */ (function (_super) {\n    __extends(CdkFooterCell, _super);\n    function CdkFooterCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    CdkFooterCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkFooterCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return CdkFooterCell;\n}(BaseCdkCell));\n/**\n * Cell template container that adds the right classes and role.\n */\nvar CdkCell = /** @class */ (function (_super) {\n    __extends(CdkCell, _super);\n    function CdkCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    CdkCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return CdkCell;\n}(BaseCdkCell));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nvar  /**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nBaseRowDef = /** @class */ (function () {\n    function BaseRowDef(/** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    BaseRowDef.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            var columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    };\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    BaseRowDef.prototype.getColumnsDiff = /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    function () {\n        return this._columnsDiffer.diff(this.columns);\n    };\n    /** Gets this row def's relevant cell template from the provided column def. */\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    BaseRowDef.prototype.extractCellTemplate = /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    function (column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    };\n    return BaseRowDef;\n}());\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nCdkHeaderRowDefBase = /** @class */ (function (_super) {\n    __extends(CdkHeaderRowDefBase, _super);\n    function CdkHeaderRowDefBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return CdkHeaderRowDefBase;\n}(BaseRowDef));\n/** @type {?} */\nvar _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nvar CdkHeaderRowDef = /** @class */ (function (_super) {\n    __extends(CdkHeaderRowDef, _super);\n    function CdkHeaderRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkHeaderRowDef.prototype.ngOnChanges = \n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        _super.prototype.ngOnChanges.call(this, changes);\n    };\n    CdkHeaderRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkHeaderRowDef.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ]; };\n    return CdkHeaderRowDef;\n}(_CdkHeaderRowDefBase));\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nCdkFooterRowDefBase = /** @class */ (function (_super) {\n    __extends(CdkFooterRowDefBase, _super);\n    function CdkFooterRowDefBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return CdkFooterRowDefBase;\n}(BaseRowDef));\n/** @type {?} */\nvar _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nvar CdkFooterRowDef = /** @class */ (function (_super) {\n    __extends(CdkFooterRowDef, _super);\n    function CdkFooterRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkFooterRowDef.prototype.ngOnChanges = \n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        _super.prototype.ngOnChanges.call(this, changes);\n    };\n    CdkFooterRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkFooterRowDef.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ]; };\n    return CdkFooterRowDef;\n}(_CdkFooterRowDefBase));\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nvar CdkRowDef = /** @class */ (function (_super) {\n    __extends(CdkRowDef, _super);\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    function CdkRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    CdkRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkRowDef.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ]; };\n    return CdkRowDef;\n}(BaseRowDef));\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nvar CdkCellOutlet = /** @class */ (function () {\n    function CdkCellOutlet(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    CdkCellOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    };\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    CdkCellOutlet.mostRecentCellOutlet = null;\n    CdkCellOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] },\n    ];\n    /** @nocollapse */\n    CdkCellOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef }\n    ]; };\n    return CdkCellOutlet;\n}());\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkHeaderRow = /** @class */ (function () {\n    function CdkHeaderRow() {\n    }\n    CdkHeaderRow.decorators = [\n        { type: Component, args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    return CdkHeaderRow;\n}());\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkFooterRow = /** @class */ (function () {\n    function CdkFooterRow() {\n    }\n    CdkFooterRow.decorators = [\n        { type: Component, args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    return CdkFooterRow;\n}());\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkRow = /** @class */ (function () {\n    function CdkRow() {\n    }\n    CdkRow.decorators = [\n        { type: Component, args: [{selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    return CdkRow;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(\"Could not find column with id \\\"\" + id + \"\\\".\");\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(\"Duplicate column definition name provided: \\\"\" + name + \"\\\".\");\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(\"Could not find a matching row definition for the\" +\n        (\"provided row data: \" + JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nvar  /**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nStickyStyler = /** @class */ (function () {\n    /**\n     * @param isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    function StickyStyler(isNativeHtmlTable, stickCellCss, direction, _isBrowser) {\n        if (_isBrowser === void 0) { _isBrowser = true; }\n        this.isNativeHtmlTable = isNativeHtmlTable;\n        this.stickCellCss = stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    StickyStyler.prototype.clearStickyPositioning = /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    function (rows, stickyDirections) {\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (var i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                var cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    };\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     */\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    StickyStyler.prototype.updateStickyColumns = /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    function (rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        var hasStickyColumns = stickyStartStates.some(function (state) { return state; }) || stickyEndStates.some(function (state) { return state; });\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        var firstRow = rows[0];\n        /** @type {?} */\n        var numCells = firstRow.children.length;\n        /** @type {?} */\n        var cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        var isRtl = this.direction === 'rtl';\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            for (var i = 0; i < numCells; i++) {\n                /** @type {?} */\n                var cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    };\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    StickyStyler.prototype.stickRows = /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    function (rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        var stickyHeight = 0;\n        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            var row = rows[rowIndex];\n            if (this.isNativeHtmlTable) {\n                for (var j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    var cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    };\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    StickyStyler.prototype.updateStickyFooterContainer = /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    function (tableElement, stickyStates) {\n        if (!this.isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        var tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some(function (state) { return !state; })) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    };\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    StickyStyler.prototype._removeStickyStyle = /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    function (element, stickyDirections) {\n        for (var _i = 0, stickyDirections_1 = stickyDirections; _i < stickyDirections_1.length; _i++) {\n            var dir = stickyDirections_1[_i];\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        var hasDirection = STICKY_DIRECTIONS.some(function (dir) { return !!element.style[dir]; });\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this.stickCellCss);\n        }\n    };\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    StickyStyler.prototype._addStickyStyle = /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    function (element, dir, dirValue) {\n        element.classList.add(this.stickCellCss);\n        element.style[dir] = dirValue + \"px\";\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    };\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    StickyStyler.prototype._getCalculatedZIndex = /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        var zIndex = 0;\n        for (var _i = 0, STICKY_DIRECTIONS_1 = STICKY_DIRECTIONS; _i < STICKY_DIRECTIONS_1.length; _i++) {\n            var dir = STICKY_DIRECTIONS_1[_i];\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? \"\" + zIndex : '';\n    };\n    /** Gets the widths for each cell in the provided row. */\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    StickyStyler.prototype._getCellWidths = /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    function (row) {\n        /** @type {?} */\n        var cellWidths = [];\n        /** @type {?} */\n        var firstRowCells = row.children;\n        for (var i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            var cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    };\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    StickyStyler.prototype._getStickyStartColumnPositions = /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    function (widths, stickyStates) {\n        /** @type {?} */\n        var positions = [];\n        /** @type {?} */\n        var nextPosition = 0;\n        for (var i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    };\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    StickyStyler.prototype._getStickyEndColumnPositions = /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    function (widths, stickyStates) {\n        /** @type {?} */\n        var positions = [];\n        /** @type {?} */\n        var nextPosition = 0;\n        for (var i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    };\n    return StickyStyler;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nvar DataRowOutlet = /** @class */ (function () {\n    function DataRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    DataRowOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[rowOutlet]' },] },\n    ];\n    /** @nocollapse */\n    DataRowOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ]; };\n    return DataRowOutlet;\n}());\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nvar HeaderRowOutlet = /** @class */ (function () {\n    function HeaderRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    HeaderRowOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[headerRowOutlet]' },] },\n    ];\n    /** @nocollapse */\n    HeaderRowOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ]; };\n    return HeaderRowOutlet;\n}());\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nvar FooterRowOutlet = /** @class */ (function () {\n    function FooterRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    FooterRowOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[footerRowOutlet]' },] },\n    ];\n    /** @nocollapse */\n    FooterRowOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ]; };\n    return FooterRowOutlet;\n}());\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nvar CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first** element\n// in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n\"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nvar /**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nRowViewRef = /** @class */ (function (_super) {\n    __extends(RowViewRef, _super);\n    function RowViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return RowViewRef;\n}(EmbeddedViewRef));\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nvar CdkTable = /** @class */ (function () {\n    function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, \n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 `_document` and `_platform` to\n     *    be made into a required parameters.\n     */\n    _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *it's* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *it's* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *it's* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *it's* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    Object.defineProperty(CdkTable.prototype, \"trackBy\", {\n        /**\n         * Tracking function that will be used to check the differences in data changes. Used similarly\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n         * relative to the function to know if a row should be added/removed/moved.\n         * Accepts a function that takes two parameters, `index` and `item`.\n         */\n        get: /**\n         * Tracking function that will be used to check the differences in data changes. Used similarly\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n         * relative to the function to know if a row should be added/removed/moved.\n         * Accepts a function that takes two parameters, `index` and `item`.\n         * @return {?}\n         */\n        function () { return this._trackByFn; },\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (isDevMode() &&\n                fn != null && typeof fn !== 'function' &&\n                (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n                console.warn(\"trackBy must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._trackByFn = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTable.prototype, \"dataSource\", {\n        /**\n         * The table's source of data, which can be provided in three ways (in order of complexity):\n         *   - Simple data array (each object represents one table row)\n         *   - Stream that emits a data array each time the array changes\n         *   - `DataSource` object that implements the connect/disconnect interface.\n         *\n         * If a data array is provided, the table must be notified when the array's objects are\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n         * render the diff since the last table render. If the data array reference is changed, the table\n         * will automatically trigger an update to the rows.\n         *\n         * When providing an Observable stream, the table will trigger an update automatically when the\n         * stream emits a new array of data.\n         *\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\n         * provided by the connect function and trigger updates when that stream emits new data array\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n         * subscriptions registered during the connect process).\n         */\n        get: /**\n         * The table's source of data, which can be provided in three ways (in order of complexity):\n         *   - Simple data array (each object represents one table row)\n         *   - Stream that emits a data array each time the array changes\n         *   - `DataSource` object that implements the connect/disconnect interface.\n         *\n         * If a data array is provided, the table must be notified when the array's objects are\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n         * render the diff since the last table render. If the data array reference is changed, the table\n         * will automatically trigger an update to the rows.\n         *\n         * When providing an Observable stream, the table will trigger an update automatically when the\n         * stream emits a new array of data.\n         *\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\n         * provided by the connect function and trigger updates when that stream emits new data array\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n         * subscriptions registered during the connect process).\n         * @return {?}\n         */\n        function () { return this._dataSource; },\n        set: /**\n         * @param {?} dataSource\n         * @return {?}\n         */\n        function (dataSource) {\n            if (this._dataSource !== dataSource) {\n                this._switchDataSource(dataSource);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTable.prototype, \"multiTemplateDataRows\", {\n        /**\n         * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n         * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n         * dataobject will render the first row that evaluates its when predicate to true, in the order\n         * defined in the table, or otherwise the default row which does not have a when predicate.\n         */\n        get: /**\n         * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n         * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n         * dataobject will render the first row that evaluates its when predicate to true, in the order\n         * defined in the table, or otherwise the default row which does not have a when predicate.\n         * @return {?}\n         */\n        function () { return this._multiTemplateDataRows; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this._multiTemplateDataRows = coerceBooleanProperty(v);\n            if (this._rowOutlet.viewContainer.length) {\n                this._forceRenderDataRows();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n            return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n    };\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    };\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    };\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    CdkTable.prototype.renderRows = /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        var changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        var viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation(function (record, prevIndex, currentIndex) {\n            if (record.previousIndex == null) {\n                _this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                var view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange(function (record) {\n            /** @type {?} */\n            var rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        });\n        this.updateStickyColumnStyles();\n    };\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * @docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.setHeaderRowDef = /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    function (headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    };\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * @docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.setFooterRowDef = /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    function (footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    };\n    /** Adds a column definition that was not included as part of the content children. */\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    CdkTable.prototype.addColumnDef = /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    function (columnDef) {\n        this._customColumnDefs.add(columnDef);\n    };\n    /** Removes a column definition that was not included as part of the content children. */\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeColumnDef = /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    function (columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    };\n    /** Adds a row definition that was not included as part of the content children. */\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype.addRowDef = /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rowDef) {\n        this._customRowDefs.add(rowDef);\n    };\n    /** Removes a row definition that was not included as part of the content children. */\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeRowDef = /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rowDef) {\n        this._customRowDefs.delete(rowDef);\n    };\n    /** Adds a header row definition that was not included as part of the content children. */\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.addHeaderRowDef = /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    function (headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    };\n    /** Removes a header row definition that was not included as part of the content children. */\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeHeaderRowDef = /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    function (headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    };\n    /** Adds a footer row definition that was not included as part of the content children. */\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.addFooterRowDef = /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    function (footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    };\n    /** Removes a footer row definition that was not included as part of the content children. */\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeFooterRowDef = /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    function (footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    };\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    CdkTable.prototype.updateStickyHeaderRowStyles = /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        /** @type {?} */\n        var stickyStates = this._headerRowDefs.map(function (def) { return def.sticky; });\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(function (def) { return def.resetStickyChanged(); });\n    };\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    CdkTable.prototype.updateStickyFooterRowStyles = /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        /** @type {?} */\n        var stickyStates = this._footerRowDefs.map(function (def) { return def.sticky; });\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(function (def) { return def.resetStickyChanged(); });\n    };\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    CdkTable.prototype.updateStickyColumnStyles = /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        var dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning(headerRows.concat(dataRows, footerRows), ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach(function (headerRow, i) {\n            _this._addStickyColumnStyles([headerRow], _this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(function (rowDef) {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            var rows = [];\n            for (var i = 0; i < dataRows.length; i++) {\n                if (_this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            _this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach(function (footerRow, i) {\n            _this._addStickyColumnStyles([footerRow], _this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(function (def) { return def.resetStickyChanged(); });\n    };\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._getAllRenderRows = /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        var prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (var i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            var data = this._data[i];\n            /** @type {?} */\n            var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (var j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                var renderRow = renderRowsForData[j];\n                /** @type {?} */\n                var cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    };\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    CdkTable.prototype._getRenderRowsForData = /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    function (data, dataIndex, cache) {\n        /** @type {?} */\n        var rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(function (rowDef) {\n            /** @type {?} */\n            var cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                var dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data: data, rowDef: rowDef, dataIndex: dataIndex };\n            }\n        });\n    };\n    /** Update the map containing the content's column definitions. */\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._cacheColumnDefs = /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach(function (columnDef) {\n            if (_this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            _this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    };\n    /** Update the list of all available row definitions that can be used. */\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._cacheRowDefs = /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs =\n            mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        var defaultRowDefs = this._rowDefs.filter(function (def) { return !def.when; });\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    };\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._renderUpdatedColumns = /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var columnsDiffReducer = function (acc, def) { return acc || !!def.getColumnsDiff(); };\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    };\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    CdkTable.prototype._switchDataSource = /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    function (dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    };\n    /** Set up a subscription for the data provided by the data source. */\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._observeRenderChanges = /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        var dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function (data) {\n            _this._data = data || [];\n            _this.renderRows();\n        });\n    };\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._forceRenderHeaderRows = /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach(function (def, i) { return _this._renderRow(_this._headerRowOutlet, def, i); });\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    };\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._forceRenderFooterRows = /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach(function (def, i) { return _this._renderRow(_this._footerRowOutlet, def, i); });\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    };\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype._addStickyColumnStyles = /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rows, rowDef) {\n        var _this = this;\n        /** @type {?} */\n        var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {\n            /** @type {?} */\n            var columnDef = _this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        });\n        /** @type {?} */\n        var stickyStartStates = columnDefs.map(function (columnDef) { return columnDef.sticky; });\n        /** @type {?} */\n        var stickyEndStates = columnDefs.map(function (columnDef) { return columnDef.stickyEnd; });\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    };\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    CdkTable.prototype._getRenderedRows = /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    function (rowOutlet) {\n        /** @type {?} */\n        var renderedRows = [];\n        for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            var viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    };\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    CdkTable.prototype._getRowDefs = /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    function (data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        var rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(function (def) { return !def.when || def.when(dataIndex, data); });\n        }\n        else {\n            /** @type {?} */\n            var rowDef = this._rowDefs.find(function (def) { return def.when && def.when(dataIndex, data); }) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    };\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     */\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    CdkTable.prototype._insertRow = /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    function (renderRow, renderIndex) {\n        /** @type {?} */\n        var rowDef = renderRow.rowDef;\n        /** @type {?} */\n        var context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    };\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    CdkTable.prototype._renderRow = /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    function (outlet, rowDef, index, context) {\n        if (context === void 0) { context = {}; }\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (var _a = 0, _b = this._getCellTemplates(rowDef); _a < _b.length; _a++) {\n            var cellTemplate = _b[_a];\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._updateRowIndexContext = /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var viewContainer = this._rowOutlet.viewContainer;\n        for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            var viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            var context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    };\n    /** Gets the column definitions for the provided row def. */\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype._getCellTemplates = /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rowDef) {\n        var _this = this;\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, function (columnId) {\n            /** @type {?} */\n            var column = _this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    };\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._applyNativeTableSections = /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    function () {\n        // @breaking-change 8.0.0 remove the `|| document` once the `_document` is a required param.\n        /** @type {?} */\n        var documentRef = this._document || document;\n        /** @type {?} */\n        var documentFragment = documentRef.createDocumentFragment();\n        /** @type {?} */\n        var sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (var _a = 0, sections_1 = sections; _a < sections_1.length; _a++) {\n            var section = sections_1[_a];\n            /** @type {?} */\n            var element = documentRef.createElement(section.tag);\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    };\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._forceRenderDataRows = /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    };\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._checkStickyStates = /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var stickyCheckReducer = function (acc, d) {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    };\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._setupStickyStyler = /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, \n        // @breaking-change 8.0.0 remove the null check for `this._platform`.\n        this.stickyCssClass, direction, this._platform ? this._platform.isBrowser : true);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function (value) {\n            _this._stickyStyler.direction = value;\n            _this.updateStickyColumnStyles();\n        });\n    };\n    CdkTable.decorators = [\n        { type: Component, args: [{selector: 'cdk-table, table[cdk-table]',\n                    exportAs: 'cdkTable',\n                    template: CDK_TABLE_TEMPLATE,\n                    host: {\n                        'class': 'cdk-table',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    CdkTable.ctorParameters = function () { return [\n        { type: IterableDiffers },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform }\n    ]; };\n    CdkTable.propDecorators = {\n        trackBy: [{ type: Input }],\n        dataSource: [{ type: Input }],\n        multiTemplateDataRows: [{ type: Input }],\n        _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet,] }],\n        _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet,] }],\n        _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet,] }],\n        _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n        _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n        _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n        _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n    };\n    return CdkTable;\n}());\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n];\nvar CdkTableModule = /** @class */ (function () {\n    function CdkTableModule() {\n    }\n    CdkTableModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule],\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS\n                },] },\n    ];\n    return CdkTableModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDefBase, _CdkColumnDefBase, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDefBase, _CdkHeaderRowDefBase, CdkHeaderRowDef, CdkFooterRowDefBase, _CdkFooterRowDefBase, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput };\n//# sourceMappingURL=table.es5.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/select\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/cdk/overlay\";\nimport * as i4 from \"@angular/cdk/bidi\";\nimport * as i5 from \"@angular/cdk/observers\";\nimport * as i6 from \"@angular/cdk/portal\";\nimport * as i7 from \"@angular/cdk/platform\";\nimport * as i8 from \"@angular/cdk/scrolling\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/platform-browser\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/forms\";\nimport * as i13 from \"@angular/cdk/a11y\";\nvar MatSelectModuleNgFactory = i0.ɵcmf(i1.MatSelectModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i3.Overlay, i3.Overlay, [i3.ScrollStrategyOptions, i3.OverlayContainer, i0.ComponentFactoryResolver, i3.OverlayPositionBuilder, i3.OverlayKeyboardDispatcher, i0.Injector, i0.NgZone, i2.DOCUMENT, i4.Directionality, [2, i2.Location]]), i0.ɵmpd(5120, i3.ɵc, i3.ɵd, [i3.Overlay]), i0.ɵmpd(4608, i5.MutationObserverFactory, i5.MutationObserverFactory, []), i0.ɵmpd(5120, i1.MAT_SELECT_SCROLL_STRATEGY, i1.MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, [i3.Overlay]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i4.BidiModule, i4.BidiModule, []), i0.ɵmpd(1073742336, i6.PortalModule, i6.PortalModule, []), i0.ɵmpd(1073742336, i7.PlatformModule, i7.PlatformModule, []), i0.ɵmpd(1073742336, i8.ScrollingModule, i8.ScrollingModule, []), i0.ɵmpd(1073742336, i3.OverlayModule, i3.OverlayModule, []), i0.ɵmpd(1073742336, i9.MatCommonModule, i9.MatCommonModule, [[2, i9.MATERIAL_SANITY_CHECKS], [2, i10.HAMMER_LOADER]]), i0.ɵmpd(1073742336, i9.MatRippleModule, i9.MatRippleModule, []), i0.ɵmpd(1073742336, i9.MatPseudoCheckboxModule, i9.MatPseudoCheckboxModule, []), i0.ɵmpd(1073742336, i9.MatOptionModule, i9.MatOptionModule, []), i0.ɵmpd(1073742336, i5.ObserversModule, i5.ObserversModule, []), i0.ɵmpd(1073742336, i11.MatFormFieldModule, i11.MatFormFieldModule, []), i0.ɵmpd(1073742336, i1.MatSelectModule, i1.MatSelectModule, [])]); });\nexport { MatSelectModuleNgFactory as MatSelectModuleNgFactory };\nvar styles_MatSelect = [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"];\nvar RenderType_MatSelect = i0.ɵcrt({ encapsulation: 2, styles: styles_MatSelect, data: { \"animation\": [{ type: 7, name: \"transformPanel\", definitions: [{ type: 0, name: \"void\", styles: { type: 6, styles: { transform: \"scaleY(0.8)\", minWidth: \"100%\", opacity: 0 }, offset: null }, options: undefined }, { type: 0, name: \"showing\", styles: { type: 6, styles: { opacity: 1, minWidth: \"calc(100% + 32px)\", transform: \"scaleY(1)\" }, offset: null }, options: undefined }, { type: 0, name: \"showing-multiple\", styles: { type: 6, styles: { opacity: 1, minWidth: \"calc(100% + 64px)\", transform: \"scaleY(1)\" }, offset: null }, options: undefined }, { type: 1, expr: \"void => *\", animation: { type: 4, styles: null, timings: \"120ms cubic-bezier(0, 0, 0.2, 1)\" }, options: null }, { type: 1, expr: \"* => void\", animation: { type: 4, styles: { type: 6, styles: { opacity: 0 }, offset: null }, timings: \"100ms 25ms linear\" }, options: null }], options: {} }] } });\nexport { RenderType_MatSelect as RenderType_MatSelect };\nfunction View_MatSelect_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [[\"class\", \"mat-select-placeholder\"]], null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.placeholder || \"\\u00A0\"); _ck(_v, 1, 0, currVal_0); }); }\nfunction View_MatSelect_3(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [], null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.triggerValue || \"\\u00A0\"); _ck(_v, 1, 0, currVal_0); }); }\nfunction View_MatSelect_4(_l) { return i0.ɵvid(0, [i0.ɵncd(null, 0), (_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nfunction View_MatSelect_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 5, \"span\", [[\"class\", \"mat-select-value-text\"]], null, null, null, null, null)), i0.ɵdid(1, 16384, null, 0, i2.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_3)), i0.ɵdid(3, 16384, null, 0, i2.NgSwitchDefault, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], null, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_4)), i0.ɵdid(5, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = !!_co.customTrigger; _ck(_v, 1, 0, currVal_0); var currVal_1 = true; _ck(_v, 5, 0, currVal_1); }, null); }\nfunction View_MatSelect_5(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, [[2, 0], [\"panel\", 1]], null, 2, \"div\", [], [[24, \"@transformPanel\", 0], [4, \"transformOrigin\", null], [4, \"font-size\", \"px\"]], [[null, \"@transformPanel.done\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"@transformPanel.done\" === en)) {\n        var pd_0 = (_co._panelDoneAnimatingStream.next($event.toState) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (_co._handleKeydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, null, null)), i0.ɵdid(1, 278528, null, 0, i2.NgClass, [i0.IterableDiffers, i0.KeyValueDiffers, i0.ElementRef, i0.Renderer2], { klass: [0, \"klass\"], ngClass: [1, \"ngClass\"] }, null), i0.ɵncd(null, 1)], function (_ck, _v) { var _co = _v.component; var currVal_3 = i0.ɵinlineInterpolate(1, \"mat-select-panel \", _co._getPanelTheme(), \"\"); var currVal_4 = _co.panelClass; _ck(_v, 1, 0, currVal_3, currVal_4); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.multiple ? \"showing-multiple\" : \"showing\"); var currVal_1 = _co._transformOrigin; var currVal_2 = _co._triggerFontSize; _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2); }); }\nexport function View_MatSelect_0(_l) { return i0.ɵvid(2, [i0.ɵqud(402653184, 1, { trigger: 0 }), i0.ɵqud(671088640, 2, { panel: 0 }), i0.ɵqud(402653184, 3, { overlayDir: 0 }), (_l()(), i0.ɵeld(3, 0, [[1, 0], [\"trigger\", 1]], null, 9, \"div\", [[\"aria-hidden\", \"true\"], [\"cdk-overlay-origin\", \"\"], [\"class\", \"mat-select-trigger\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.toggle() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.ɵdid(4, 16384, [[\"origin\", 4]], 0, i3.CdkOverlayOrigin, [i0.ElementRef], null, null), (_l()(), i0.ɵeld(5, 0, null, null, 5, \"div\", [[\"class\", \"mat-select-value\"]], null, null, null, null, null)), i0.ɵdid(6, 16384, null, 0, i2.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_1)), i0.ɵdid(8, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_2)), i0.ɵdid(10, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵeld(11, 0, null, null, 1, \"div\", [[\"class\", \"mat-select-arrow-wrapper\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(12, 0, null, null, 0, \"div\", [[\"class\", \"mat-select-arrow\"]], null, null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"backdropClick\" === en)) {\n        var pd_0 = (_co.close() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"attach\" === en)) {\n        var pd_1 = (_co._onAttached() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"detach\" === en)) {\n        var pd_2 = (_co.close() !== false);\n        ad = (pd_2 && ad);\n    } return ad; }, View_MatSelect_5)), i0.ɵdid(14, 671744, [[3, 4]], 0, i3.CdkConnectedOverlay, [i3.Overlay, i0.TemplateRef, i0.ViewContainerRef, i3.ɵc, [2, i4.Directionality]], { origin: [0, \"origin\"], positions: [1, \"positions\"], offsetY: [2, \"offsetY\"], minWidth: [3, \"minWidth\"], backdropClass: [4, \"backdropClass\"], scrollStrategy: [5, \"scrollStrategy\"], open: [6, \"open\"], hasBackdrop: [7, \"hasBackdrop\"], lockPosition: [8, \"lockPosition\"] }, { backdropClick: \"backdropClick\", attach: \"attach\", detach: \"detach\" })], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.empty; _ck(_v, 6, 0, currVal_0); var currVal_1 = true; _ck(_v, 8, 0, currVal_1); var currVal_2 = false; _ck(_v, 10, 0, currVal_2); var currVal_3 = i0.ɵnov(_v, 4); var currVal_4 = _co._positions; var currVal_5 = _co._offsetY; var currVal_6 = ((_co._triggerRect == null) ? null : _co._triggerRect.width); var currVal_7 = \"cdk-overlay-transparent-backdrop\"; var currVal_8 = _co._scrollStrategy; var currVal_9 = _co.panelOpen; var currVal_10 = \"\"; var currVal_11 = \"\"; _ck(_v, 14, 0, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11); }, null); }\nexport function View_MatSelect_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 6, \"mat-select\", [[\"class\", \"mat-select\"], [\"role\", \"listbox\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-label\", 0], [1, \"aria-labelledby\", 0], [1, \"aria-required\", 0], [1, \"aria-disabled\", 0], [1, \"aria-invalid\", 0], [1, \"aria-owns\", 0], [1, \"aria-multiselectable\", 0], [1, \"aria-describedby\", 0], [1, \"aria-activedescendant\", 0], [2, \"mat-select-disabled\", null], [2, \"mat-select-invalid\", null], [2, \"mat-select-required\", null], [2, \"mat-select-empty\", null]], [[null, \"keydown\"], [null, \"focus\"], [null, \"blur\"]], function (_v, en, $event) { var ad = true; if ((\"keydown\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 3)._handleKeydown($event) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"focus\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 3)._onFocus() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_2 = (i0.ɵnov(_v, 3)._onBlur() !== false);\n        ad = (pd_2 && ad);\n    } return ad; }, View_MatSelect_0, RenderType_MatSelect)), i0.ɵprd(6144, null, i11.MatFormFieldControl, null, [i1.MatSelect]), i0.ɵprd(6144, null, i9.MAT_OPTION_PARENT_COMPONENT, null, [i1.MatSelect]), i0.ɵdid(3, 2080768, null, 3, i1.MatSelect, [i8.ViewportRuler, i0.ChangeDetectorRef, i0.NgZone, i9.ErrorStateMatcher, i0.ElementRef, [2, i4.Directionality], [2, i12.NgForm], [2, i12.FormGroupDirective], [2, i11.MatFormField], [8, null], [8, null], i1.MAT_SELECT_SCROLL_STRATEGY, i13.LiveAnnouncer], null, null), i0.ɵqud(603979776, 1, { options: 1 }), i0.ɵqud(603979776, 2, { optionGroups: 1 }), i0.ɵqud(335544320, 3, { customTrigger: 0 })], function (_ck, _v) { _ck(_v, 3, 0); }, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 3).id; var currVal_1 = i0.ɵnov(_v, 3).tabIndex; var currVal_2 = i0.ɵnov(_v, 3)._getAriaLabel(); var currVal_3 = i0.ɵnov(_v, 3)._getAriaLabelledby(); var currVal_4 = i0.ɵnov(_v, 3).required.toString(); var currVal_5 = i0.ɵnov(_v, 3).disabled.toString(); var currVal_6 = i0.ɵnov(_v, 3).errorState; var currVal_7 = (i0.ɵnov(_v, 3).panelOpen ? i0.ɵnov(_v, 3)._optionIds : null); var currVal_8 = i0.ɵnov(_v, 3).multiple; var currVal_9 = (i0.ɵnov(_v, 3)._ariaDescribedby || null); var currVal_10 = i0.ɵnov(_v, 3)._getAriaActiveDescendant(); var currVal_11 = i0.ɵnov(_v, 3).disabled; var currVal_12 = i0.ɵnov(_v, 3).errorState; var currVal_13 = i0.ɵnov(_v, 3).required; var currVal_14 = i0.ɵnov(_v, 3).empty; _ck(_v, 0, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14]); }); }\nvar MatSelectNgFactory = i0.ɵccf(\"mat-select\", i1.MatSelect, View_MatSelect_Host_0, { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: \"aria-label\", ariaLabelledby: \"aria-labelledby\", errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\", id: \"id\" }, { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, [\"mat-select-trigger\", \"*\"]);\nexport { MatSelectNgFactory as MatSelectNgFactory };\n","<div cdk-overlay-origin class=\"mat-select-trigger\" aria-hidden=\"true\" (click)=\"toggle()\" #origin=\"cdkOverlayOrigin\" #trigger><div class=\"mat-select-value\" [ngSwitch]=\"empty\"><span class=\"mat-select-placeholder\" *ngSwitchCase=\"true\">{{placeholder || '\\u00A0'}}</span> <span class=\"mat-select-value-text\" *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\"mat-select-trigger\" *ngSwitchCase=\"true\"></ng-content></span></div><div class=\"mat-select-arrow-wrapper\"><div class=\"mat-select-arrow\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\" [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\" [cdkConnectedOverlayOrigin]=\"origin\" [cdkConnectedOverlayOpen]=\"panelOpen\" [cdkConnectedOverlayPositions]=\"_positions\" [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width\" [cdkConnectedOverlayOffsetY]=\"_offsetY\" (backdropClick)=\"close()\" (attach)=\"_onAttached()\" (detach)=\"close()\"><div #panel class=\"mat-select-panel {{ _getPanelTheme() }}\" [ngClass]=\"panelClass\" [@transformPanel]=\"multiple ? 'showing-multiple' : 'showing'\" (@transformPanel.done)=\"_panelDoneAnimatingStream.next($event.toState)\" [style.transformOrigin]=\"_transformOrigin\" [style.font-size.px]=\"_triggerFontSize\" (keydown)=\"_handleKeydown($event)\"><ng-content></ng-content></div></ng-template>"],"sourceRoot":""}